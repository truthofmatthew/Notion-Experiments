{"version":3,"file":"popup.js","mappings":";;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,aAAa,mBAAO,CAAC,GAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;ACvBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,kBAAkB,GAAG,oBAAoB,GAAG,6BAA6B,GAAG,sBAAsB,GAAG,mBAAmB,GAAG,kBAAkB,GAAG,qBAAqB;AACxL,wBAAwB;AACxB,wBAAwB;AACxB,oBAAoB;AACpB,wBAAwB;AACxB,wBAAwB,mBAAO,CAAC,GAAkB;AAClD,qBAAqB;AACrB,kBAAkB;AAClB,mBAAmB;AACnB,sBAAsB;AACtB,6BAA6B;AAC7B,oBAAoB;AACpB,kBAAkB;AAClB,gBAAgB,sCAAsC;AACtD;AACA,IAAI,8BAA8B;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,IAAI,8BAA8B,4GAA4G,8BAA8B;AAC5K;AACA;AACA;AACA,QAAQ,4BAA4B;AACpC;AACA;AACA,IAAI,oCAAoC;AACxC,IAAI,gCAAgC;AACpC,YAAY,OAAO;AACnB;AACA;AACA;;;;;;;;ACzCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,wBAAwB;AACxB,wBAAwB;AACxB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,oBAAoB;AACpB,MAAM,iFAAiF;AACvF,MAAM,yEAAyE;AAC/E,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kEAAkE;AAC7E;AACA,WAAW,kEAAkE;AAC7E;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA,WAAW,2DAA2D;AACtE;AACA,WAAW,2DAA2D;AACtE;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA,cAAc,8DAA8D;AAC5E;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,cAAc,mEAAmE;AACjF;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjvD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sCAAsC,qDAAqD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;ACtXa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,sBAAsB;AACtB,aAAa,mBAAO,CAAC,GAAM;AAC3B,wBAAwB,mBAAO,CAAC,GAAkB;AAClD;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD,4BAA4B,mCAAmC;AAC/D;AACA;AACA,sDAAsD,uBAAuB;AAC7E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kCAAkC,+BAA+B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA,sDAAsD,+BAA+B;AACrF;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,gCAAgC,mCAAmC;AACnE;AACA;AACA,0DAA0D,cAAc;AACxE;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+BAA+B,mCAAmC;AAClE;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,eAAe;AACf;AACA;AACA,YAAY;AACZ,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA,kDAAkD,mBAAmB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;;;;;;UCvHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBa;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D,aAAa,mBAAO,CAAC,GAAM;AAC3B,iBAAiB,mBAAO,CAAC,GAAU;AACnC,gBAAgB,mBAAO,CAAC,GAAS;AACjC;AACA;AACA","sources":["webpack://notion-persian-dates/./src/popup/state.ts","webpack://notion-persian-dates/./src/popup/ui.ts","webpack://notion-persian-dates/./src/fontInjection.ts","webpack://notion-persian-dates/./src/popup/events.ts","webpack://notion-persian-dates/webpack/bootstrap","webpack://notion-persian-dates/./src/popup/popup.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadState = loadState;\nconst ui_1 = require(\"./ui\");\nconst events_1 = require(\"./events\");\nfunction loadState() {\n    chrome.storage.sync.get([\"persianInput\", \"fontInjectionEnabled\", \"selectedFont\"], data => {\n        ui_1.persianToggle.checked = !!data.persianInput;\n        ui_1.fontToggle.checked = !!data.fontInjectionEnabled;\n        if (data.fontInjectionEnabled) {\n            ui_1.fontSelectorContainer.classList.add('visible');\n        }\n        else {\n            ui_1.fontSelectorContainer.classList.remove('visible');\n        }\n        if (data.selectedFont) {\n            ui_1.fontSelector.value = data.selectedFont;\n            //   updateFontAuthor();\n        }\n        if (data.persianInput) {\n            (0, events_1.checkForErrors)();\n        }\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.statusEl = exports.fontAuthor = exports.fontSelector = exports.fontSelectorContainer = exports.errorMessageEl = exports.resetButton = exports.fontToggle = exports.persianToggle = void 0;\nexports.initFontSelector = initFontSelector;\nexports.updateFontAuthor = updateFontAuthor;\nexports.updateStatus = updateStatus;\nexports.showErrorMessage = showErrorMessage;\nconst fontInjection_1 = require(\"../fontInjection\");\nexports.persianToggle = document.getElementById('persian-toggle');\nexports.fontToggle = document.getElementById('font-toggle');\nexports.resetButton = document.getElementById('reset-button');\nexports.errorMessageEl = document.getElementById('error-message');\nexports.fontSelectorContainer = document.getElementById('font-selector-container');\nexports.fontSelector = document.getElementById('font-selector');\nexports.fontAuthor = document.getElementById('font-author');\nexports.statusEl = document.getElementById('status'); // if used\nfunction initFontSelector() {\n    exports.fontSelector.innerHTML = '';\n    fontInjection_1.defaultFonts.forEach(font => {\n        const option = document.createElement('option');\n        option.value = font.en_name;\n        option.textContent = font.fa_name;\n        option.dataset.author = font.creator;\n        exports.fontSelector.appendChild(option);\n    });\n    //   updateFontAuthor();\n}\nfunction updateFontAuthor() {\n    const selectedOption = exports.fontSelector.options[exports.fontSelector.selectedIndex];\n    exports.fontAuthor.textContent = (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.dataset.author) ? `By: ${selectedOption.dataset.author}` : '';\n}\nfunction updateStatus(message) {\n    if (exports.statusEl)\n        exports.statusEl.textContent = message;\n}\nfunction showErrorMessage(count) {\n    exports.errorMessageEl.style.display = 'block';\n    exports.errorMessageEl.innerHTML = `\n    <p>⚠️ ${count} conversion errors detected!</p>\n    <p>Some dates might be displaying incorrectly. Try the \"Reset All Dates\" button to fix.</p>\n  `;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultFonts = void 0;\nexports.saveSelectedFont = saveSelectedFont;\nexports.loadSelectedFont = loadSelectedFont;\nexports.setCurrentFont = setCurrentFont;\nexports.injectFonts = injectFonts;\n// Font injection functionality\nlet fontStyleElement = null;\nlet observer = null;\nlet currentFont = \"Vazirmatn\"; // Default font\n// Unicode range constant\nconst UNICODE_RANGE = 'U+0600-06FF, U+0750-077F, U+FB50-FDFF, U+FE70-FEFF';\n// Font options\nexports.defaultFonts = [\n    { en_name: \"Vazirmatn\", fa_name: \"وزیر متن\", creator: \"زنده یاد صابر راستی کردار\" },\n    { en_name: \"Sahel\", fa_name: \"ساحل\", creator: \"زنده یاد صابر راستی کردار\" },\n    { en_name: \"Parastoo\", fa_name: \"پرستو\", creator: \"زنده یاد صابر راستی کردار\" }\n];\n// All fonts CSS\nconst ALL_FONTS_CSS = `\n/* ========== Vazirmatn ========== */\n@font-face {\n  font-family: \"Vazirmatn\";\n  src:\n    url(\"${chrome.runtime.getURL('assets/fonts/vazir/Vazirmatn[wght].woff2')}\")\n      format(\"woff2 supports variations\"),\n    url(\"${chrome.runtime.getURL('assets/fonts/vazir/Vazirmatn[wght].woff2')}\")\n      format(\"woff2-variations\");\n  font-weight: 100 900;\n  font-style: normal;\n  font-display: swap;\n  unicode-range: ${UNICODE_RANGE};\n}\n\n/* ========== Sahel ========== */\n@font-face {\n  font-family: \"Sahel\";\n  src:\n    url(\"${chrome.runtime.getURL('assets/fonts/sahel/Sahel-VF.woff2')}\")\n      format(\"woff2 supports variations\"),\n    url(\"${chrome.runtime.getURL('assets/fonts/sahel/Sahel-VF.woff2')}\")\n      format(\"woff2-variations\");\n  font-weight: 100 900;\n  font-style: normal;\n  font-display: swap;\n  unicode-range: ${UNICODE_RANGE};\n}\n\n/* ========== Parastoo ========== */\n@font-face {\n  font-family: \"Parastoo\";\n  src: url(\"${chrome.runtime.getURL('assets/fonts/parastoo/Parastoo.woff2')}\") format(\"woff2\");\n  font-weight: normal;\n  font-style: normal;\n  unicode-range: ${UNICODE_RANGE};\n}\n@font-face {\n  font-family: \"Parastoo\";\n  src: url(\"${chrome.runtime.getURL('assets/fonts/parastoo/Parastoo-Bold.woff2')}\")\n    format(\"woff2\");\n  font-weight: bold;\n  font-style: normal;\n  unicode-range: ${UNICODE_RANGE};\n}\n\n/* Keep code blocks in LTR */\n.notion-text-content[data-content-type=\"code\"] {\n  direction: ltr !important;\n  text-align: left !important;\n  font-family: \"SF Mono\", \"Consolas\", \"Monaco\", \"Andale Mono\", monospace !important;\n}\n`;\n// Convert English digits to Persian digits\nfunction toPersianDigits(input) {\n    return input.replace(/\\d/g, d => \"۰۱۲۳۴۵۶۷۸۹\"[parseInt(d)]);\n}\n// Function to check if text contains Persian/Arabic characters\nfunction containsPersianArabic(text) {\n    const persianArabicRegex = /[\\u0600-\\u06FF\\u0750-\\u077F\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/;\n    return persianArabicRegex.test(text);\n}\n// Process a text node\nfunction processTextNode(node) {\n    var _a;\n    const text = node.textContent || '';\n    if (!containsPersianArabic(text))\n        return;\n    const container = (_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.closest('.notranslate[data-content-editable-leaf=\"true\"]');\n    if (!container || container.closest('[data-content-type=\"code\"]'))\n        return;\n    container.style.fontFamily = `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`;\n    container.style.direction = 'rtl';\n    container.style.textAlign = 'right';\n}\n// Process all text nodes in a subtree\nfunction processSubtree(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null);\n    let node;\n    while (node = walker.nextNode()) {\n        processTextNode(node);\n    }\n}\n// Update numbered list block: convert number to Persian and set RTL\nfunction updateNumberedListBlock(block) {\n    const pseudo = block.querySelector('.pseudoBefore');\n    if (pseudo) {\n        let content = pseudo.style.getPropertyValue('--pseudoBefore--content');\n        if (!content)\n            content = pseudo.textContent || \"\";\n        content = content.replace(/[\"']/g, \"\").trim();\n        const persianContent = toPersianDigits(content);\n        pseudo.style.removeProperty(\"--pseudoBefore--content\");\n        pseudo.textContent = persianContent;\n        pseudo.style.direction = 'rtl';\n        pseudo.style.textAlign = 'right';\n    }\n}\n// Apply RTL and number conversion for numbered lists\nfunction applyRTLToNumberedLists() {\n    document.querySelectorAll(\".notion-selectable.notion-numbered_list-block\").forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            updateNumberedListBlock(block);\n            block.style.direction = 'rtl';\n            block.style.textAlign = 'right';\n        }\n    });\n}\n// Apply RTL adjustments for quote blocks\nfunction applyRTLToQuotes() {\n    document.querySelectorAll(\".notion-quote-block\").forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            const bq = block.querySelector(\"blockquote\");\n            if (bq) {\n                const inner = bq.querySelector(\"div[style*='border-left']\");\n                if (inner) {\n                    const computed = window.getComputedStyle(inner);\n                    const originalPaddingLeft = computed.paddingLeft;\n                    const originalPaddingRight = computed.paddingRight;\n                    inner.style.borderLeft = \"none\";\n                    inner.style.borderRight = \"3px solid currentcolor\";\n                    inner.style.paddingLeft = originalPaddingRight;\n                    inner.style.paddingRight = originalPaddingLeft;\n                }\n                bq.style.direction = \"rtl\";\n                bq.style.textAlign = \"right\";\n            }\n        }\n    });\n}\n// Apply RTL adjustments for toggle blocks, including moving the toggle button to the right\nfunction applyRTLToToggleBlocks() {\n    document.querySelectorAll(\".notion-selectable.notion-toggle-block\").forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            const toggleBlock = block;\n            // toggleBlock.style.direction = \"rtl\";\n            toggleBlock.style.textAlign = \"right\";\n            // Ensure the container reverses the order with important flag to override inline styles\n            const flexContainer = toggleBlock.firstElementChild;\n            if (flexContainer) {\n                flexContainer.style.setProperty(\"flex-direction\", \"row-reverse\", \"important\");\n            }\n        }\n    });\n}\n// Additional RTL logic for blocks\nfunction applyAdditionalRTLLogic() {\n    document.querySelectorAll(\".notion-selectable.notion-bulleted_list-block\").forEach((block) => {\n        block.setAttribute(\"dir\", \"rtl\");\n    });\n    document.querySelectorAll(\".notion-table-block\").forEach((block) => {\n        if (Array.from(block.querySelectorAll(\"*\")).some(el => containsPersianArabic(el.textContent || \"\"))) {\n            block.setAttribute(\"dir\", \"rtl\");\n        }\n    });\n    document.querySelectorAll(\".notion-to_do-block\").forEach((block) => {\n        if (Array.from(block.querySelectorAll(\"*\")).some(el => containsPersianArabic(el.textContent || \"\"))) {\n            block.setAttribute(\"dir\", \"rtl\");\n        }\n    });\n}\n// New parts RTL logic for headers, table cells, header cells, etc.\nfunction applyRTLToNewParts() {\n    const selectors = \".notion-body h1, .notion-body h2, .notion-body h3, .notion-body h4, .notion-body h5, .notion-body h6, \" +\n        \".notion-table-view th, .notion-table-view td, .notion-collection_view-block div[data-content-editable-void='true'] > div:nth-child(2), \" +\n        \".notion-table-view-header-cell, .notion-table-view-cell\";\n    document.querySelectorAll(selectors).forEach((el) => {\n        if (containsPersianArabic(el.textContent || \"\")) {\n            const element = el;\n            element.style.direction = \"rtl\";\n            element.style.textAlign = \"right\";\n            element.style.fontFamily = `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`;\n        }\n    });\n}\n// Global font style for main Notion elements\nfunction applyGlobalFontStyles() {\n    const selectors = [\n        \".notion-page-content\",\n        \".notion-table-view\",\n        \".notion-board-view\",\n        \".notion-gallery-view\",\n        \".notion-page-block\",\n        \".notion-topbar\",\n        \".notion-body\",\n        \".notion-selectable\",\n        \".notion-collection_view-block\",\n        \".notion-frame\",\n        \".notion-collection-item\"\n    ].join(\", \");\n    document.querySelectorAll(selectors).forEach((el) => {\n        el.style.setProperty(\"font-family\", `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`, \"important\");\n    });\n}\n// Setup the observer\nfunction setupObserver() {\n    if (observer)\n        return;\n    observer = new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type === 'childList') {\n                mutation.addedNodes.forEach(node => {\n                    if (node.nodeType === Node.ELEMENT_NODE)\n                        processSubtree(node);\n                });\n            }\n            else if (mutation.type === 'characterData') {\n                processTextNode(mutation.target);\n            }\n        }\n        applyAdditionalRTLLogic();\n        applyGlobalFontStyles();\n        applyRTLToNewParts();\n        applyRTLToNumberedLists();\n        applyRTLToQuotes();\n        applyRTLToToggleBlocks();\n    });\n    observer.observe(document.body, { childList: true, subtree: true, characterData: true });\n    processSubtree(document.body);\n    applyAdditionalRTLLogic();\n    applyGlobalFontStyles();\n    applyRTLToNewParts();\n    applyRTLToNumberedLists();\n    applyRTLToQuotes();\n    applyRTLToToggleBlocks();\n}\n// Cleanup the observer\nfunction cleanupObserver() {\n    if (observer) {\n        observer.disconnect();\n        observer = null;\n    }\n}\n// Save the selected font to storage\nfunction saveSelectedFont(fontFamily) {\n    return new Promise((resolve) => {\n        chrome.storage.sync.set({ selectedFont: fontFamily }, () => resolve());\n    });\n}\n// Load the selected font from storage\nfunction loadSelectedFont() {\n    return new Promise((resolve) => {\n        chrome.storage.sync.get(['selectedFont'], (result) => resolve(result.selectedFont || 'Vazirmatn'));\n    });\n}\n// Set the current font\nfunction setCurrentFont(fontFamily) {\n    currentFont = fontFamily;\n    if (fontStyleElement) {\n        document.querySelectorAll('.notranslate[data-content-editable-leaf=\"true\"]').forEach((el) => {\n            const element = el;\n            if (containsPersianArabic(element.textContent || '')) {\n                element.style.fontFamily = `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`;\n            }\n        });\n    }\n    applyGlobalFontStyles();\n    applyRTLToNewParts();\n    applyRTLToNumberedLists();\n    applyRTLToQuotes();\n    applyRTLToToggleBlocks();\n}\n// Inject or remove font styles and observer\nfunction injectFonts(enabled) {\n    if (enabled) {\n        loadSelectedFont().then((fontFamily) => {\n            currentFont = fontFamily;\n            if (!fontStyleElement) {\n                fontStyleElement = document.createElement('style');\n                fontStyleElement.textContent = ALL_FONTS_CSS;\n                document.head.appendChild(fontStyleElement);\n            }\n            setupObserver();\n        });\n    }\n    else {\n        if (fontStyleElement) {\n            fontStyleElement.remove();\n            fontStyleElement = null;\n        }\n        // Reset all text content elements\n        document.querySelectorAll('.notranslate[data-content-editable-leaf=\"true\"]').forEach((el) => {\n            const element = el;\n            element.style.fontFamily = '';\n            element.style.direction = '';\n            element.style.textAlign = '';\n        });\n        // Reset global font styles\n        const globalSelectors = [\n            \".notion-page-content\",\n            \".notion-table-view\",\n            \".notion-board-view\",\n            \".notion-gallery-view\",\n            \".notion-page-block\",\n            \".notion-topbar\",\n            \".notion-body\",\n            \".notion-selectable\",\n            \".notion-collection_view-block\",\n            \".notion-frame\",\n            \".notion-collection-item\"\n        ].join(\", \");\n        document.querySelectorAll(globalSelectors).forEach((el) => {\n            el.style.removeProperty(\"font-family\");\n        });\n        // Reset heading and table elements\n        const rtlSelectors = \".notion-body h1, .notion-body h2, .notion-body h3, .notion-body h4, .notion-body h5, .notion-body h6, \" +\n            \".notion-table-view th, .notion-table-view td, .notion-collection_view-block div[data-content-editable-void='true'] > div:nth-child(2), \" +\n            \".notion-table-view-header-cell, .notion-table-view-cell\";\n        document.querySelectorAll(rtlSelectors).forEach((el) => {\n            const element = el;\n            element.style.direction = '';\n            element.style.textAlign = '';\n            element.style.fontFamily = '';\n        });\n        // Reset numbered lists\n        document.querySelectorAll(\".notion-selectable.notion-numbered_list-block\").forEach((block) => {\n            block.style.direction = '';\n            block.style.textAlign = '';\n            const pseudo = block.querySelector('.pseudoBefore');\n            if (pseudo) {\n                pseudo.style.direction = '';\n                pseudo.style.textAlign = '';\n            }\n        });\n        // Reset quotes\n        document.querySelectorAll(\".notion-quote-block\").forEach((block) => {\n            const bq = block.querySelector(\"blockquote\");\n            if (bq) {\n                const inner = bq.querySelector(\"div[style*='border-right']\");\n                if (inner) {\n                    inner.style.borderRight = \"none\";\n                    inner.style.borderLeft = \"3px solid currentcolor\";\n                    inner.style.paddingLeft = \"\";\n                    inner.style.paddingRight = \"\";\n                }\n                bq.style.direction = \"\";\n                bq.style.textAlign = \"\";\n            }\n        });\n        // Reset toggle blocks\n        document.querySelectorAll(\".notion-selectable.notion-toggle-block\").forEach((block) => {\n            const toggleBlock = block;\n            toggleBlock.style.textAlign = \"\";\n            const flexContainer = toggleBlock.firstElementChild;\n            if (flexContainer) {\n                flexContainer.style.removeProperty(\"flex-direction\");\n            }\n        });\n        // Reset additional RTL elements\n        document.querySelectorAll(\".notion-selectable.notion-bulleted_list-block, .notion-table-block, .notion-to_do-block\").forEach((block) => {\n            block.removeAttribute(\"dir\");\n        });\n        cleanupObserver();\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initListeners = initListeners;\nexports.checkForErrors = checkForErrors;\nconst ui_1 = require(\"./ui\");\nconst fontInjection_1 = require(\"../fontInjection\");\nlet altKeyPressed = false;\nfunction initListeners() {\n    ui_1.persianToggle.addEventListener(\"change\", () => {\n        const enabled = ui_1.persianToggle.checked;\n        chrome.storage.sync.set({ persianInput: enabled });\n        chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n            var _a;\n            if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n                chrome.tabs.sendMessage(tabs[0].id, { persianInput: enabled });\n            }\n        });\n        if (!enabled) {\n            ui_1.errorMessageEl.style.display = 'none';\n        }\n        else {\n            setTimeout(checkForErrors, 1000);\n        }\n    });\n    ui_1.fontToggle.addEventListener('change', () => {\n        const enabled = ui_1.fontToggle.checked;\n        chrome.storage.sync.set({ fontInjectionEnabled: enabled });\n        if (enabled) {\n            ui_1.fontSelectorContainer.classList.add('visible');\n        }\n        else {\n            ui_1.fontSelectorContainer.classList.remove('visible');\n        }\n        chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n            var _a;\n            if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n                chrome.tabs.sendMessage(tabs[0].id, { fontInjectionEnabled: enabled });\n            }\n        });\n    });\n    ui_1.fontSelector.addEventListener('change', () => {\n        const selectedFont = ui_1.fontSelector.value;\n        // updateFontAuthor();\n        (0, fontInjection_1.saveSelectedFont)(selectedFont).then(() => {\n            chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n                var _a;\n                if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n                    chrome.tabs.sendMessage(tabs[0].id, { selectedFont });\n                }\n            });\n        });\n    });\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Alt') {\n            altKeyPressed = true;\n            ui_1.resetButton.textContent = \"Force Reload Page\";\n        }\n    });\n    document.addEventListener('keyup', (e) => {\n        if (e.key === 'Alt') {\n            altKeyPressed = false;\n            ui_1.resetButton.textContent = \"Reset All Dates\";\n        }\n    });\n    //   resetButton.addEventListener(\"click\", () => {\n    //     const forceReload = altKeyPressed;\n    //     resetButton.disabled = true;\n    //     errorMessageEl.style.display = 'none';\n    //     chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n    //       if (tabs[0]?.id) {\n    //         chrome.tabs.sendMessage(tabs[0].id, { \n    //           refreshConversion: true,\n    //           forceReload\n    //         }, () => {\n    //           if (chrome.runtime.lastError) {\n    //             resetButton.disabled = false;\n    //           }\n    //           if (forceReload) {\n    //             window.close();\n    //           }\n    //         });\n    //       } else {\n    //         resetButton.disabled = false;\n    //       }\n    //     });\n    //   });\n    chrome.runtime.onMessage.addListener((message) => {\n        if (message.resetComplete) {\n            if (!message.reloading) {\n                ui_1.resetButton.disabled = false;\n                setTimeout(checkForErrors, 500);\n            }\n        }\n        if (message.errorCountChanged !== undefined) {\n            if (message.errorCount > 0) {\n                (0, ui_1.showErrorMessage)(message.errorCount);\n            }\n            else {\n                ui_1.errorMessageEl.style.display = 'none';\n            }\n        }\n    });\n}\nfunction checkForErrors() {\n    chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n        var _a;\n        if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n            chrome.tabs.sendMessage(tabs[0].id, { checkErrors: true }, (response) => {\n                if (chrome.runtime.lastError)\n                    return;\n                if (response && response.errorCount > 0) {\n                    (0, ui_1.showErrorMessage)(response.errorCount);\n                }\n                else {\n                    ui_1.errorMessageEl.style.display = 'none';\n                }\n            });\n        }\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ui_1 = require(\"./ui\");\nconst events_1 = require(\"./events\");\nconst state_1 = require(\"./state\");\n(0, ui_1.initFontSelector)();\n(0, state_1.loadState)();\n(0, events_1.initListeners)();\n"],"names":[],"sourceRoot":""}