{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://notion-persian-tools/./src/popup/state.ts","webpack://notion-persian-tools/./src/popup/ui.ts","webpack://notion-persian-tools/./src/constant.ts","webpack://notion-persian-tools/./src/fontInjection.ts","webpack://notion-persian-tools/./src/popup/events.ts","webpack://notion-persian-tools/webpack/bootstrap","webpack://notion-persian-tools/./src/popup/popup.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadState = loadState;\nconst ui_1 = require(\"./ui\");\nconst events_1 = require(\"./events\");\nconst constant_1 = require(\"../constant\");\nfunction loadState() {\n    chrome.storage.sync.get([constant_1.STORAGE_KEYS.PERSIAN_INPUT, constant_1.STORAGE_KEYS.FONT_INJECTION_ENABLED, constant_1.STORAGE_KEYS.SELECTED_FONT], data => {\n        ui_1.persianToggle.checked = !!data[constant_1.STORAGE_KEYS.PERSIAN_INPUT];\n        ui_1.fontToggle.checked = !!data[constant_1.STORAGE_KEYS.FONT_INJECTION_ENABLED];\n        if (data[constant_1.STORAGE_KEYS.FONT_INJECTION_ENABLED]) {\n            ui_1.fontSelectorContainer.classList.add('visible');\n        }\n        else {\n            ui_1.fontSelectorContainer.classList.remove('visible');\n        }\n        if (data[constant_1.STORAGE_KEYS.SELECTED_FONT]) {\n            ui_1.fontSelector.value = data[constant_1.STORAGE_KEYS.SELECTED_FONT];\n        }\n        if (data[constant_1.STORAGE_KEYS.PERSIAN_INPUT]) {\n            (0, events_1.checkForErrors)();\n        }\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.statusEl = exports.fontAuthor = exports.fontSelector = exports.fontSelectorContainer = exports.errorMessageEl = exports.resetButton = exports.fontToggle = exports.persianToggle = void 0;\nexports.initFontSelector = initFontSelector;\nexports.updateFontAuthor = updateFontAuthor;\nexports.updateStatus = updateStatus;\nexports.showErrorMessage = showErrorMessage;\nconst constant_1 = require(\"../constant\");\nexports.persianToggle = document.getElementById(constant_1.UI_ELEMENTS.PERSIAN_TOGGLE);\nexports.fontToggle = document.getElementById(constant_1.UI_ELEMENTS.FONT_TOGGLE);\nexports.resetButton = document.getElementById(constant_1.UI_ELEMENTS.RESET_BUTTON);\nexports.errorMessageEl = document.getElementById(constant_1.UI_ELEMENTS.ERROR_MESSAGE);\nexports.fontSelectorContainer = document.getElementById(constant_1.UI_ELEMENTS.FONT_SELECTOR_CONTAINER);\nexports.fontSelector = document.getElementById(constant_1.UI_ELEMENTS.FONT_SELECTOR);\nexports.fontAuthor = document.getElementById(constant_1.UI_ELEMENTS.FONT_AUTHOR);\nexports.statusEl = document.getElementById(constant_1.UI_ELEMENTS.STATUS);\nfunction initFontSelector() {\n    exports.fontSelector.innerHTML = '';\n    constant_1.DEFAULT_FONTS.forEach(font => {\n        const option = document.createElement('option');\n        option.value = font.en_name;\n        option.textContent = font.fa_name;\n        option.dataset.author = font.creator;\n        exports.fontSelector.appendChild(option);\n    });\n}\nfunction updateFontAuthor() {\n    const selectedOption = exports.fontSelector.options[exports.fontSelector.selectedIndex];\n    exports.fontAuthor.textContent = (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.dataset.author) ? `By: ${selectedOption.dataset.author}` : '';\n}\nfunction updateStatus(message) {\n    if (exports.statusEl)\n        exports.statusEl.textContent = message;\n}\nfunction showErrorMessage(count) {\n    exports.errorMessageEl.style.display = 'block';\n    exports.errorMessageEl.innerHTML = `\n    <p>⚠️ ${count} conversion errors detected!</p>\n    <p>Some dates might be displaying incorrectly. Try the \"Reset All Dates\" button to fix.</p>\n  `;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HTML_CONSTANTS = exports.SELECTOR_DATE_PICKER_INPUT = exports.SELECTOR_PROPERTY_VALUE = exports.SELECTOR_DATE_MENTION = exports.SELECTOR_DATE_FORMAT_CLEAR = exports.SELECTOR_NEXT_MONTH = exports.SELECTOR_PREV_MONTH = exports.SELECTOR_DATE_BUTTONS = exports.NOTION_URL_PATTERN = exports.DEBOUNCE_DELAY = exports.MESSAGE_TYPES = exports.UI_ELEMENTS = exports.STORAGE_KEYS = exports.SELECTOR_REMINDERS = exports.DATASET_KEYS = exports.SYSTEM_FONTS = exports.DEFAULT_FONT = exports.SELECTOR_GLOBAL_FONTS = exports.SELECTOR_RTL_ELEMENTS = exports.SELECTOR_TODO_BLOCK = exports.SELECTOR_TABLE_BLOCK = exports.SELECTOR_BULLETED_LIST = exports.SELECTOR_TOGGLE_BLOCK = exports.SELECTOR_QUOTE_BLOCK = exports.SELECTOR_NUMBERED_LIST = exports.SELECTOR_CODE_BLOCK = exports.SELECTOR_EDITABLE_TEXT = exports.ALL_FONTS_CSS = exports.DEFAULT_FONTS = exports.UNICODE_RANGE = exports.PANEL_STATE_KEY = exports.SELECTOR_MENTIONS = exports.CLICK_INSTRUCTION = exports.NO_DATES_MESSAGE = exports.PANEL_TITLE = exports.TOAST_ID = exports.SHOW_BTN_ID = exports.HIDE_BTN_ID = exports.MINIMIZE_BTN_ID = exports.CONTENT_ID = exports.PANEL_ID = exports.SELECTOR_TABLE_DATES = exports.TIME_THRESHOLD_MS = exports.STANDARD_DATE_FORMAT = exports.PERSIAN_MONTHS = exports.MONTHS = exports.LOG_PREFIX = void 0;\n// Logging\nexports.LOG_PREFIX = \"mtlog:\";\n// Date Utilities\nexports.MONTHS = {\n    january: 1, february: 2, march: 3, april: 4, may: 5, june: 6,\n    july: 7, august: 8, september: 9, october: 10, november: 11, december: 12,\n    jan: 1, feb: 2, mar: 3, apr: 4, jun: 6, jul: 7, aug: 8, sep: 9, sept: 9, oct: 10, nov: 11, dec: 12\n};\nexports.PERSIAN_MONTHS = [\n    'فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور',\n    'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'\n];\nexports.STANDARD_DATE_FORMAT = /^(\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})$/;\n// Table Date Converter\nexports.TIME_THRESHOLD_MS = 500;\nexports.SELECTOR_TABLE_DATES = \"[data-testid='property-value'] div, div.notion-date\";\n// Convert Notifications\nexports.PANEL_ID = 'persian-dates-panel';\nexports.CONTENT_ID = 'persian-dates-content';\nexports.MINIMIZE_BTN_ID = 'persian-dates-minimize';\nexports.HIDE_BTN_ID = 'persian-dates-hide';\nexports.SHOW_BTN_ID = 'persian-dates-show-button';\nexports.TOAST_ID = 'persian-dates-toast';\nexports.PANEL_TITLE = 'Persian Dates';\nexports.NO_DATES_MESSAGE = 'No date mentions found.';\nexports.CLICK_INSTRUCTION = 'Click a date to copy Persian format or scroll to its location';\nexports.SELECTOR_MENTIONS = '.notion-text-mention-token .notion-reminder';\nexports.PANEL_STATE_KEY = 'persian-dates-panel-state';\n// Font Injection\nexports.UNICODE_RANGE = 'U+0600-06FF, U+0750-077F, U+FB50-FDFF, U+FE70-FEFF';\nexports.DEFAULT_FONTS = [\n    { en_name: \"Vazirmatn\", fa_name: \"وزیر متن\", creator: \"صابر راستی کردار\" },\n    { en_name: \"Sahel\", fa_name: \"ساحل\", creator: \"صابر راستی کردار\" },\n    { en_name: \"Parastoo\", fa_name: \"پرستو\", creator: \"صابر راستی کردار\" }\n];\nexports.ALL_FONTS_CSS = `\n/* ========== Vazirmatn ========== */\n@font-face {\n  font-family: \"Vazirmatn\";\n  src:\n    url(\"${chrome.runtime.getURL('assets/fonts/vazir/Vazirmatn[wght].woff2')}\")\n      format(\"woff2 supports variations\"),\n    url(\"${chrome.runtime.getURL('assets/fonts/vazir/Vazirmatn[wght].woff2')}\")\n      format(\"woff2-variations\");\n  font-weight: 100 900;\n  font-style: normal;\n  font-display: swap;\n  unicode-range: ${exports.UNICODE_RANGE};\n}\n\n/* ========== Sahel ========== */\n@font-face {\n  font-family: \"Sahel\";\n  src:\n    url(\"${chrome.runtime.getURL('assets/fonts/sahel/Sahel-VF.woff2')}\")\n      format(\"woff2 supports variations\"),\n    url(\"${chrome.runtime.getURL('assets/fonts/sahel/Sahel-VF.woff2')}\")\n      format(\"woff2-variations\");\n  font-weight: 100 900;\n  font-style: normal;\n  font-display: swap;\n  unicode-range: ${exports.UNICODE_RANGE};\n}\n\n/* ========== Parastoo ========== */\n@font-face {\n  font-family: \"Parastoo\";\n  src: url(\"${chrome.runtime.getURL('assets/fonts/parastoo/Parastoo.woff2')}\") format(\"woff2\");\n  font-weight: normal;\n  font-style: normal;\n  unicode-range: ${exports.UNICODE_RANGE};\n}\n@font-face {\n  font-family: \"Parastoo\";\n  src: url(\"${chrome.runtime.getURL('assets/fonts/parastoo/Parastoo-Bold.woff2')}\")\n    format(\"woff2\");\n  font-weight: bold;\n  font-style: normal;\n  unicode-range: ${exports.UNICODE_RANGE};\n}\n\n/* Keep code blocks in LTR */\n.notion-text-content[data-content-type=\"code\"] {\n  direction: ltr !important;\n  text-align: left !important;\n  font-family: \"SF Mono\", \"Consolas\", \"Monaco\", \"Andale Mono\", monospace !important;\n}\n`;\nexports.SELECTOR_EDITABLE_TEXT = '.notranslate[data-content-editable-leaf=\"true\"]';\nexports.SELECTOR_CODE_BLOCK = '[data-content-type=\"code\"]';\nexports.SELECTOR_NUMBERED_LIST = '.notion-selectable.notion-numbered_list-block';\nexports.SELECTOR_QUOTE_BLOCK = '.notion-quote-block';\nexports.SELECTOR_TOGGLE_BLOCK = '.notion-selectable.notion-toggle-block';\nexports.SELECTOR_BULLETED_LIST = '.notion-selectable.notion-bulleted_list-block';\nexports.SELECTOR_TABLE_BLOCK = '.notion-table-block';\nexports.SELECTOR_TODO_BLOCK = '.notion-to_do-block';\nexports.SELECTOR_RTL_ELEMENTS = '.notion-body h1, .notion-body h2, .notion-body h3, .notion-body h4, .notion-body h5, .notion-body h6, ' +\n    '.notion-table-view th, .notion-table-view td, .notion-collection_view-block div[data-content-editable-void=\"true\"] > div:nth-child(2), ' +\n    '.notion-table-view-header-cell, .notion-table-view-cell';\nexports.SELECTOR_GLOBAL_FONTS = [\n    '.notion-page-content',\n    '.notion-table-view',\n    '.notion-board-view',\n    '.notion-gallery-view',\n    '.notion-page-block',\n    '.notion-topbar',\n    '.notion-body',\n    '.notion-selectable',\n    '.notion-collection_view-block',\n    '.notion-frame',\n    '.notion-collection-item'\n].join(', ');\nexports.DEFAULT_FONT = 'Vazirmatn';\nexports.SYSTEM_FONTS = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif';\n// Convert Text\nexports.DATASET_KEYS = {\n    ORIGINAL_DATE: 'originalDate',\n    CONVERTED: 'converted'\n};\nexports.SELECTOR_REMINDERS = '.notion-reminder';\n// Storage Keys\nexports.STORAGE_KEYS = {\n    PERSIAN_INPUT: 'persianInput',\n    FONT_INJECTION_ENABLED: 'fontInjectionEnabled',\n    SELECTED_FONT: 'selectedFont',\n    PERSIAN_NUMBERS: 'persianNumbers'\n};\n// UI Elements\nexports.UI_ELEMENTS = {\n    PERSIAN_TOGGLE: 'persian-toggle',\n    FONT_TOGGLE: 'font-toggle',\n    RESET_BUTTON: 'reset-button',\n    ERROR_MESSAGE: 'error-message',\n    FONT_SELECTOR_CONTAINER: 'font-selector-container',\n    FONT_SELECTOR: 'font-selector',\n    FONT_AUTHOR: 'font-author',\n    STATUS: 'status',\n    CALL_MESSAGE: 'call-message'\n};\n// Message Types\nexports.MESSAGE_TYPES = {\n    APPLY_SETTINGS: 'applySettings',\n    RESET_COMPLETE: 'resetComplete',\n    ERROR_COUNT_CHANGED: 'errorCountChanged',\n    CHECK_ERRORS: 'checkErrors',\n    REFRESH_CONVERSION: 'refreshConversion'\n};\n// Content Script\nexports.DEBOUNCE_DELAY = 300;\nexports.NOTION_URL_PATTERN = '*://*.notion.so/*';\nexports.SELECTOR_DATE_BUTTONS = 'button[name=\"day\"]';\nexports.SELECTOR_PREV_MONTH = 'button[name=\"previous-month\"]';\nexports.SELECTOR_NEXT_MONTH = 'button[name=\"next-month\"]';\nexports.SELECTOR_DATE_FORMAT_CLEAR = '[role=\"button\"]';\nexports.SELECTOR_DATE_MENTION = '.notion-selectable';\nexports.SELECTOR_PROPERTY_VALUE = '[data-testid=\"property-value\"]';\nexports.SELECTOR_DATE_PICKER_INPUT = '.rdp';\n// Popup HTML\nexports.HTML_CONSTANTS = {\n    TITLE: 'نوشن فارسی',\n    HEADER_TEXT: 'نوشن فارسی',\n    CALENDAR_LABEL: 'تاریخ شمسی',\n    FONT_LABEL: 'فونت فارسی',\n    CALL_MESSAGE: 'اگه چیزی خراب بود، یه خبر بهم بده  🐞',\n    FOOTER_NAME: 'Matthew Truth'\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveSelectedFont = saveSelectedFont;\nexports.loadSelectedFont = loadSelectedFont;\nexports.setCurrentFont = setCurrentFont;\nexports.injectFonts = injectFonts;\nconst constant_1 = require(\"./constant\");\nlet fontStyleElement = null;\nlet observer = null;\nlet currentFont = constant_1.DEFAULT_FONT;\nfunction toPersianDigits(input) {\n    return input.replace(/\\d/g, d => \"۰۱۲۳۴۵۶۷۸۹\"[parseInt(d)]);\n}\nfunction containsPersianArabic(text) {\n    const persianArabicRegex = /[\\u0600-\\u06FF\\u0750-\\u077F\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/;\n    return persianArabicRegex.test(text);\n}\nfunction processTextNode(node) {\n    var _a;\n    const text = node.textContent || '';\n    if (!containsPersianArabic(text))\n        return;\n    const container = (_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.closest(constant_1.SELECTOR_EDITABLE_TEXT);\n    if (!container || container.closest(constant_1.SELECTOR_CODE_BLOCK))\n        return;\n    container.style.fontFamily = `${currentFont}, ${constant_1.SYSTEM_FONTS}`;\n    container.style.direction = 'rtl';\n    container.style.textAlign = 'right';\n}\nfunction processSubtree(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null);\n    let node;\n    while ((node = walker.nextNode()))\n        processTextNode(node);\n}\nfunction updateNumberedListBlock(block) {\n    const pseudo = block.querySelector('.pseudoBefore');\n    if (pseudo) {\n        let content = pseudo.style.getPropertyValue('--pseudoBefore--content') || pseudo.textContent || \"\";\n        content = content.replace(/[\"']/g, \"\").trim();\n        const persianContent = toPersianDigits(content);\n        pseudo.style.removeProperty(\"--pseudoBefore--content\");\n        pseudo.textContent = persianContent;\n        pseudo.style.direction = 'rtl';\n        pseudo.style.textAlign = 'right';\n    }\n}\nfunction applyRTLToNumberedLists() {\n    document.querySelectorAll(constant_1.SELECTOR_NUMBERED_LIST).forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            updateNumberedListBlock(block);\n            block.style.direction = 'rtl';\n            block.style.textAlign = 'right';\n        }\n    });\n}\nfunction applyRTLToQuotes() {\n    document.querySelectorAll(constant_1.SELECTOR_QUOTE_BLOCK).forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            const bq = block.querySelector(\"blockquote\");\n            if (bq) {\n                const inner = bq.querySelector(\"div[style*='border-left']\");\n                if (inner) {\n                    const computed = window.getComputedStyle(inner);\n                    const originalPaddingLeft = computed.paddingLeft;\n                    const originalPaddingRight = computed.paddingRight;\n                    inner.style.borderLeft = \"none\";\n                    inner.style.borderRight = \"3px solid currentcolor\";\n                    inner.style.paddingLeft = originalPaddingRight;\n                    inner.style.paddingRight = originalPaddingLeft;\n                }\n                bq.style.direction = \"rtl\";\n                bq.style.textAlign = \"right\";\n            }\n        }\n    });\n}\nfunction applyRTLToToggleBlocks() {\n    document.querySelectorAll(constant_1.SELECTOR_TOGGLE_BLOCK).forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            const toggleBlock = block;\n            toggleBlock.style.textAlign = \"right\";\n            const flexContainer = toggleBlock.firstElementChild;\n            if (flexContainer)\n                flexContainer.style.setProperty(\"flex-direction\", \"row-reverse\", \"important\");\n        }\n    });\n}\nfunction applyAdditionalRTLLogic() {\n    document.querySelectorAll(constant_1.SELECTOR_BULLETED_LIST).forEach((block) => {\n        block.setAttribute(\"dir\", \"rtl\");\n    });\n    document.querySelectorAll(constant_1.SELECTOR_TABLE_BLOCK).forEach((block) => {\n        if (Array.from(block.querySelectorAll(\"*\")).some(el => containsPersianArabic(el.textContent || \"\"))) {\n            block.setAttribute(\"dir\", \"rtl\");\n        }\n    });\n    document.querySelectorAll(constant_1.SELECTOR_TODO_BLOCK).forEach((block) => {\n        if (Array.from(block.querySelectorAll(\"*\")).some(el => containsPersianArabic(el.textContent || \"\"))) {\n            block.setAttribute(\"dir\", \"rtl\");\n        }\n    });\n}\nfunction applyRTLToNewParts() {\n    document.querySelectorAll(constant_1.SELECTOR_RTL_ELEMENTS).forEach((el) => {\n        if (containsPersianArabic(el.textContent || \"\")) {\n            const element = el;\n            element.style.direction = \"rtl\";\n            element.style.textAlign = \"right\";\n            element.style.fontFamily = `${currentFont}, ${constant_1.SYSTEM_FONTS}`;\n        }\n    });\n}\nfunction applyGlobalFontStyles() {\n    document.querySelectorAll(constant_1.SELECTOR_GLOBAL_FONTS).forEach((el) => {\n        el.style.setProperty(\"font-family\", `${currentFont}, ${constant_1.SYSTEM_FONTS}`, \"important\");\n    });\n}\nfunction setupObserver() {\n    if (observer)\n        return;\n    observer = new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type === 'childList') {\n                mutation.addedNodes.forEach(node => { if (node.nodeType === Node.ELEMENT_NODE)\n                    processSubtree(node); });\n            }\n            else if (mutation.type === 'characterData') {\n                processTextNode(mutation.target);\n            }\n        }\n        applyAdditionalRTLLogic();\n        applyGlobalFontStyles();\n        applyRTLToNewParts();\n        applyRTLToNumberedLists();\n        applyRTLToQuotes();\n        applyRTLToToggleBlocks();\n    });\n    observer.observe(document.body, { childList: true, subtree: true, characterData: true });\n    processSubtree(document.body);\n    applyAdditionalRTLLogic();\n    applyGlobalFontStyles();\n    applyRTLToNewParts();\n    applyRTLToNumberedLists();\n    applyRTLToQuotes();\n    applyRTLToToggleBlocks();\n}\nfunction cleanupObserver() {\n    if (observer) {\n        observer.disconnect();\n        observer = null;\n    }\n}\nfunction saveSelectedFont(fontFamily) {\n    return new Promise((resolve) => {\n        chrome.storage.sync.set({ [constant_1.STORAGE_KEYS.SELECTED_FONT]: fontFamily }, () => resolve());\n    });\n}\nfunction loadSelectedFont() {\n    return new Promise((resolve) => {\n        chrome.storage.sync.get([constant_1.STORAGE_KEYS.SELECTED_FONT], (result) => resolve(result[constant_1.STORAGE_KEYS.SELECTED_FONT] || constant_1.DEFAULT_FONT));\n    });\n}\nfunction setCurrentFont(fontFamily) {\n    currentFont = fontFamily;\n    if (fontStyleElement) {\n        document.querySelectorAll(constant_1.SELECTOR_EDITABLE_TEXT).forEach((el) => {\n            const element = el;\n            if (containsPersianArabic(element.textContent || '')) {\n                element.style.fontFamily = `${currentFont}, ${constant_1.SYSTEM_FONTS}`;\n            }\n        });\n    }\n    applyGlobalFontStyles();\n    applyRTLToNewParts();\n    applyRTLToNumberedLists();\n    applyRTLToQuotes();\n    applyRTLToToggleBlocks();\n}\nfunction injectFonts(enabled) {\n    if (enabled) {\n        loadSelectedFont().then((fontFamily) => {\n            currentFont = fontFamily;\n            if (!fontStyleElement) {\n                fontStyleElement = document.createElement('style');\n                fontStyleElement.textContent = constant_1.ALL_FONTS_CSS;\n                document.head.appendChild(fontStyleElement);\n            }\n            setupObserver();\n        });\n    }\n    else {\n        if (fontStyleElement) {\n            fontStyleElement.remove();\n            fontStyleElement = null;\n        }\n        document.querySelectorAll(constant_1.SELECTOR_EDITABLE_TEXT).forEach((el) => {\n            const element = el;\n            element.style.fontFamily = '';\n            element.style.direction = '';\n            element.style.textAlign = '';\n        });\n        document.querySelectorAll(constant_1.SELECTOR_GLOBAL_FONTS).forEach((el) => {\n            el.style.removeProperty(\"font-family\");\n        });\n        document.querySelectorAll(constant_1.SELECTOR_RTL_ELEMENTS).forEach((el) => {\n            const element = el;\n            element.style.direction = '';\n            element.style.textAlign = '';\n            element.style.fontFamily = '';\n        });\n        document.querySelectorAll(constant_1.SELECTOR_NUMBERED_LIST).forEach((block) => {\n            block.style.direction = '';\n            block.style.textAlign = '';\n            const pseudo = block.querySelector('.pseudoBefore');\n            if (pseudo) {\n                pseudo.style.direction = '';\n                pseudo.style.textAlign = '';\n            }\n        });\n        document.querySelectorAll(constant_1.SELECTOR_QUOTE_BLOCK).forEach((block) => {\n            const bq = block.querySelector(\"blockquote\");\n            if (bq) {\n                const inner = bq.querySelector(\"div[style*='border-right']\");\n                if (inner) {\n                    inner.style.borderRight = \"none\";\n                    inner.style.borderLeft = \"3px solid currentcolor\";\n                    inner.style.paddingLeft = \"\";\n                    inner.style.paddingRight = \"\";\n                }\n                bq.style.direction = \"\";\n                bq.style.textAlign = \"\";\n            }\n        });\n        document.querySelectorAll(constant_1.SELECTOR_TOGGLE_BLOCK).forEach((block) => {\n            const toggleBlock = block;\n            toggleBlock.style.textAlign = \"\";\n            const flexContainer = toggleBlock.firstElementChild;\n            if (flexContainer)\n                flexContainer.style.removeProperty(\"flex-direction\");\n        });\n        document.querySelectorAll(`${constant_1.SELECTOR_BULLETED_LIST}, ${constant_1.SELECTOR_TABLE_BLOCK}, ${constant_1.SELECTOR_TODO_BLOCK}`).forEach((block) => {\n            block.removeAttribute(\"dir\");\n        });\n        cleanupObserver();\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initListeners = initListeners;\nexports.checkForErrors = checkForErrors;\nconst ui_1 = require(\"./ui\");\nconst fontInjection_1 = require(\"../fontInjection\");\nconst constant_1 = require(\"../constant\");\nlet altKeyPressed = false;\nfunction initListeners() {\n    ui_1.persianToggle.addEventListener(\"change\", () => {\n        const enabled = ui_1.persianToggle.checked;\n        chrome.storage.sync.set({ [constant_1.STORAGE_KEYS.PERSIAN_INPUT]: enabled });\n        chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n            var _a;\n            if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n                chrome.tabs.sendMessage(tabs[0].id, { persianInput: enabled });\n            }\n        });\n        if (!enabled) {\n            ui_1.errorMessageEl.style.display = 'none';\n        }\n        else {\n            setTimeout(checkForErrors, 1000);\n        }\n    });\n    ui_1.fontToggle.addEventListener('change', () => {\n        const enabled = ui_1.fontToggle.checked;\n        chrome.storage.sync.set({ [constant_1.STORAGE_KEYS.FONT_INJECTION_ENABLED]: enabled });\n        if (enabled) {\n            ui_1.fontSelectorContainer.classList.add('visible');\n        }\n        else {\n            ui_1.fontSelectorContainer.classList.remove('visible');\n        }\n        chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n            var _a;\n            if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n                chrome.tabs.sendMessage(tabs[0].id, { fontInjectionEnabled: enabled });\n            }\n        });\n    });\n    ui_1.fontSelector.addEventListener('change', () => {\n        const selectedFont = ui_1.fontSelector.value;\n        (0, fontInjection_1.saveSelectedFont)(selectedFont).then(() => {\n            chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n                var _a;\n                if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n                    chrome.tabs.sendMessage(tabs[0].id, { selectedFont });\n                }\n            });\n        });\n    });\n    document.addEventListener('keydown', (e) => {\n        if (e.key === 'Alt') {\n            altKeyPressed = true;\n            ui_1.resetButton.textContent = \"Force Reload Page\";\n        }\n    });\n    document.addEventListener('keyup', (e) => {\n        if (e.key === 'Alt') {\n            altKeyPressed = false;\n            ui_1.resetButton.textContent = \"Reset All Dates\";\n        }\n    });\n    chrome.runtime.onMessage.addListener((message) => {\n        if (message[constant_1.MESSAGE_TYPES.RESET_COMPLETE]) {\n            if (!message.reloading) {\n                ui_1.resetButton.disabled = false;\n                setTimeout(checkForErrors, 500);\n            }\n        }\n        if (message[constant_1.MESSAGE_TYPES.ERROR_COUNT_CHANGED] !== undefined) {\n            if (message.errorCount > 0) {\n                (0, ui_1.showErrorMessage)(message.errorCount);\n            }\n            else {\n                ui_1.errorMessageEl.style.display = 'none';\n            }\n        }\n    });\n}\nfunction checkForErrors() {\n    chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n        var _a;\n        if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n            chrome.tabs.sendMessage(tabs[0].id, { [constant_1.MESSAGE_TYPES.CHECK_ERRORS]: true }, (response) => {\n                if (chrome.runtime.lastError)\n                    return;\n                if (response && response.errorCount > 0) {\n                    (0, ui_1.showErrorMessage)(response.errorCount);\n                }\n                else {\n                    ui_1.errorMessageEl.style.display = 'none';\n                }\n            });\n        }\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ui_1 = require(\"./ui\");\nconst events_1 = require(\"./events\");\nconst state_1 = require(\"./state\");\nconst constant_1 = require(\"../constant\");\n(0, ui_1.initFontSelector)();\n(0, state_1.loadState)();\n(0, events_1.initListeners)();\nconst settingsGear = document.getElementById(\"settings-gear\");\nconst mainPage = document.getElementById(\"main-page\");\nconst settingsPage = document.getElementById(\"settings-page\");\nconst backBtn = document.getElementById(\"settings-back\");\nconst persianNumbersToggle = document.getElementById(\"persian-numbers-toggle\");\n// load toggle state\nchrome.storage.sync.get([constant_1.STORAGE_KEYS.PERSIAN_NUMBERS], (data) => {\n    persianNumbersToggle.checked = !!data[constant_1.STORAGE_KEYS.PERSIAN_NUMBERS];\n});\n// save toggle state\npersianNumbersToggle.addEventListener(\"change\", () => {\n    chrome.storage.sync.set({ [constant_1.STORAGE_KEYS.PERSIAN_NUMBERS]: persianNumbersToggle.checked }, () => {\n        chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n            var _a;\n            if ((_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.id) {\n                chrome.tabs.sendMessage(tabs[0].id, { type: constant_1.MESSAGE_TYPES.REFRESH_CONVERSION });\n            }\n        });\n    });\n});\n// show settings\nsettingsGear.addEventListener(\"click\", () => {\n    mainPage.style.display = \"none\";\n    settingsPage.style.display = \"block\";\n});\n// back to main\nbackBtn.addEventListener(\"click\", () => {\n    settingsPage.style.display = \"none\";\n    mainPage.style.display = \"block\";\n});\n"],"names":["Object","defineProperty","exports","value","loadState","chrome","storage","sync","get","constant_1","STORAGE_KEYS","PERSIAN_INPUT","FONT_INJECTION_ENABLED","SELECTED_FONT","data","ui_1","persianToggle","checked","fontToggle","fontSelectorContainer","classList","add","remove","fontSelector","events_1","checkForErrors","statusEl","fontAuthor","errorMessageEl","resetButton","initFontSelector","innerHTML","DEFAULT_FONTS","forEach","font","option","document","createElement","en_name","textContent","fa_name","dataset","author","creator","appendChild","updateFontAuthor","selectedOption","options","selectedIndex","updateStatus","message","showErrorMessage","count","style","display","getElementById","UI_ELEMENTS","PERSIAN_TOGGLE","FONT_TOGGLE","RESET_BUTTON","ERROR_MESSAGE","FONT_SELECTOR_CONTAINER","FONT_SELECTOR","FONT_AUTHOR","STATUS","HTML_CONSTANTS","SELECTOR_DATE_PICKER_INPUT","SELECTOR_PROPERTY_VALUE","SELECTOR_DATE_MENTION","SELECTOR_DATE_FORMAT_CLEAR","SELECTOR_NEXT_MONTH","SELECTOR_PREV_MONTH","SELECTOR_DATE_BUTTONS","NOTION_URL_PATTERN","DEBOUNCE_DELAY","MESSAGE_TYPES","SELECTOR_REMINDERS","DATASET_KEYS","SYSTEM_FONTS","DEFAULT_FONT","SELECTOR_GLOBAL_FONTS","SELECTOR_RTL_ELEMENTS","SELECTOR_TODO_BLOCK","SELECTOR_TABLE_BLOCK","SELECTOR_BULLETED_LIST","SELECTOR_TOGGLE_BLOCK","SELECTOR_QUOTE_BLOCK","SELECTOR_NUMBERED_LIST","SELECTOR_CODE_BLOCK","SELECTOR_EDITABLE_TEXT","ALL_FONTS_CSS","UNICODE_RANGE","PANEL_STATE_KEY","SELECTOR_MENTIONS","CLICK_INSTRUCTION","NO_DATES_MESSAGE","PANEL_TITLE","TOAST_ID","SHOW_BTN_ID","HIDE_BTN_ID","MINIMIZE_BTN_ID","CONTENT_ID","PANEL_ID","SELECTOR_TABLE_DATES","TIME_THRESHOLD_MS","STANDARD_DATE_FORMAT","PERSIAN_MONTHS","MONTHS","LOG_PREFIX","january","february","march","april","may","june","july","august","september","october","november","december","jan","feb","mar","apr","jun","jul","aug","sep","sept","oct","nov","dec","runtime","getURL","join","ORIGINAL_DATE","CONVERTED","PERSIAN_NUMBERS","CALL_MESSAGE","APPLY_SETTINGS","RESET_COMPLETE","ERROR_COUNT_CHANGED","CHECK_ERRORS","REFRESH_CONVERSION","TITLE","HEADER_TEXT","CALENDAR_LABEL","FONT_LABEL","FOOTER_NAME","saveSelectedFont","fontFamily","Promise","resolve","set","loadSelectedFont","setCurrentFont","currentFont","fontStyleElement","querySelectorAll","el","element","containsPersianArabic","applyGlobalFontStyles","applyRTLToNewParts","applyRTLToNumberedLists","applyRTLToQuotes","applyRTLToToggleBlocks","injectFonts","enabled","then","head","observer","MutationObserver","mutations","mutation","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","processSubtree","processTextNode","target","applyAdditionalRTLLogic","observe","body","childList","subtree","characterData","setupObserver","direction","textAlign","removeProperty","block","pseudo","querySelector","bq","inner","borderRight","borderLeft","paddingLeft","paddingRight","toggleBlock","flexContainer","firstElementChild","removeAttribute","disconnect","text","test","_a","container","parentElement","closest","root","walker","createTreeWalker","NodeFilter","SHOW_TEXT","nextNode","updateNumberedListBlock","content","getPropertyValue","replace","trim","persianContent","d","parseInt","computed","window","getComputedStyle","originalPaddingLeft","originalPaddingRight","setProperty","setAttribute","Array","from","some","result","initListeners","addEventListener","tabs","query","active","currentWindow","id","sendMessage","persianInput","setTimeout","fontInjectionEnabled","selectedFont","fontInjection_1","e","key","altKeyPressed","onMessage","addListener","reloading","disabled","undefined","errorCount","response","lastError","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","state_1","settingsGear","mainPage","settingsPage","backBtn","persianNumbersToggle"],"sourceRoot":""}