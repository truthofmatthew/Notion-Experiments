{"version":3,"file":"content.js","mappings":";;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,yBAAyB;AACzB;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC,oBAAoB,mBAAO,CAAC,GAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,8BAA8B,EAAE,UAAU,IAAI,UAAU;AACnG;AACA,kDAAkD,gCAAgC;AAClF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,6DAA6D;AACnE,MAAM,0DAA0D;AAChE,MAAM,oDAAoD;AAC1D,MAAM,uDAAuD;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,+BAA+B,SAAS;AACxsCAAsC,aAAa,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA,uCAAuC,sBAAsB,iCAAiC;AAC9F,wCAAwC,gBAAgB,kBAAkB;AAC1E,yCAAyC,gBAAgB,eAAe,cAAc,IAAI,YAAY;AACtG;AACA,qCAAqC,YAAY;AACjD,YAAY;AACZ;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iCAAiC,aAAa,iBAAiB,mBAAmB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,qCAAqC;AACrF;AACA;AACA;AACA;AACA;AACA,aAAa;AACbqBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AClea;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,2BAA2B;AAC3B,4BAA4B;AAC5B,gCAAgC;AAChC,qBAAqB;AACrB,oBAAoB,mBAAO,CAAC,GAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wCAAwC,iBAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3Ja;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd,qBAAqB;AACrB,sBAAsB;AACtB,oBAAoB;AACpB,0BAA0B;AAC1B;AACA,gBAAgB,mBAAO,CAAC,GAAY;AACpC;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE,OAAO,IAAI,OAAO,IAAI;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,IAAI,SAAS,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE,SAAS,IAAI,SAAS,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,IAAI,OAAO,IAAI,OAAO,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE,sBAAsB,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU,GAAG,sCAAsC,GAAG,sCAAsC;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,EAAE,OAAO,IAAI,OAAO,IAAI;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa,GAAG,yCAAyC,GAAG,yCAAyC;AACvH;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjLA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B;;;AAG5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;AChWa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,wBAAwB;AACxB,wBAAwB;AACxB,sBAAsB;AACtB,mBAAmB;AACnB;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,oBAAoB;AACpB,MAAM,iFAAiF;AACvF,MAAM,yEAAyE;AAC/E,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kEAAkE;AAC7E;AACA,WAAW,kEAAkE;AAC7E;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA,WAAW,2DAA2D;AACtE;AACA,WAAW,2DAA2D;AACtE;AACA;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA,cAAc,8DAA8D;AAC5E;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,cAAc,mEAAmE;AACjF;AACA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjvD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,sCAAsC,qDAAqD;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;UCtXA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBa;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D,uBAAuB,mBAAO,CAAC,GAAiB;AAChD,uBAAuB,mBAAO,CAAC,EAAiB;AAChD,wBAAwB,mBAAO,CAAC,GAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,qBAAqB;AACrB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wCAAwC,YAAY,SAAS,YAAY,eAAe,cAAc;AACtaAAa;AACb;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA","sources":["webpack://notion-persian-dates/./src/convertNotif.ts","webpack://notion-persian-dates/./src/convertTable.ts","webpack://notion-persian-dates/./src/dateUtils.ts","webpack://notion-persian-dates/./node_modules/jalaali-js/index.js","webpack://notion-persian-dates/./src/fontInjection.ts","webpack://notion-persian-dates/webpack/bootstrap","webpack://notion-persian-dates/./src/content/content.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertDateMentions = convertDateMentions;\nexports.resetDateMentions = resetDateMentions;\n// Import the jalaali-js library for accurate date conversions\nconst jalaali = require('jalaali-js');\nconst dateUtils_1 = require(\"./dateUtils\");\n// Store the floating panel element\nlet floatingPanel = null;\n// Store the show button element\nlet showButton = null;\n// Track which dates we've converted\nconst convertedDates = new Map();\n// Track panel state\nlet isPanelHidden = false;\n// Track panel position\nlet panelPosition = { top: '', left: '', right: '20px', bottom: '20px' };\n/**\n * Convert date mentions/reminders in Notion\n * These appear as @Date elements like \"@April 26, 2025\"\n */\nfunction convertDateMentions(persianInput) {\n    console.log(\"mtlog: Converting date mentions, persianInput =\", persianInput);\n    let conversionCount = 0;\n    try {\n        // Handle based on Persian mode\n        if (persianInput) {\n            // Load panel state from storage\n            loadPanelState();\n            // Create the floating panel if needed\n            createFloatingPanel();\n            // Find all date mention tokens in Notion\n            const mentions = document.querySelectorAll('.notion-text-mention-token .notion-reminder');\n            // Clear current conversions\n            convertedDates.clear();\n            // Process each date mention\n            mentions.forEach(reminder => {\n                const current = reminder.textContent || \"\";\n                const currentTrimmed = current.trim();\n                if (!currentTrimmed)\n                    return;\n                // Skip if already in Persian format\n                if ((0, dateUtils_1.isPersianDate)(currentTrimmed))\n                    return;\n                // Try to extract the date info to convert it\n                const dateInfo = extractDateFromMention(currentTrimmed);\n                if (dateInfo) {\n                    const { date, display } = dateInfo;\n                    // Convert to Persian date\n                    const jalali = jalaali.toJalaali(date);\n                    // Create Persian date format\n                    const persianMonths = [\n                        'فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور',\n                        'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'\n                    ];\n                    const persianDate = `${persianMonths[jalali.jm - 1]} ${jalali.jd}، ${jalali.jy}`;\n                    // Store the conversion with element reference\n                    convertedDates.set(display, { persianDate, element: reminder });\n                    conversionCount++;\n                    console.log(\"mtlog: Converted mention\", display, \"to\", persianDate);\n                }\n            });\n            // Update the panel with conversions\n            updatePanelContent();\n            // Apply panel visibility based on saved state\n            if (isPanelHidden) {\n                hidePanel();\n            }\n            else {\n                showPanel();\n            }\n        }\n        else {\n            // Remove panel in Gregorian mode\n            removeFloatingPanel();\n            convertedDates.clear();\n        }\n        return conversionCount;\n    }\n    catch (error) {\n        console.error(\"Error converting date mentions:\", error);\n        return conversionCount;\n    }\n}\n/**\n * Create floating panel with Persian date conversions\n */\nfunction createFloatingPanel() {\n    // Only create if it doesn't exist\n    if (floatingPanel && document.body.contains(floatingPanel))\n        return;\n    // Create panel container\n    floatingPanel = document.createElement('div');\n    floatingPanel.id = 'persian-dates-panel';\n    floatingPanel.style.cssText = `\n    position: fixed;\n    ${panelPosition.bottom ? 'bottom: ' + panelPosition.bottom + ';' : ''}\n    ${panelPosition.right ? 'right: ' + panelPosition.right + ';' : ''}\n    ${panelPosition.top ? 'top: ' + panelPosition.top + ';' : ''}\n    ${panelPosition.left ? 'left: ' + panelPosition.left + ';' : ''}\n    width: 280px;\n    max-height: 400px;\n    background: #ffffff;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif;\n    z-index: 9999;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n    transition: opacity 0.2s ease, transform 0.2s ease;\n  `;\n    // Create header\n    const header = document.createElement('div');\n    header.style.cssText = `\n    padding: 12px 16px;\n    border-bottom: 1px solid #f0f0f0;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    cursor: move;\n    background: #f7f6f3;\n  `;\n    header.innerHTML = `\n    <div style=\"font-weight: 600; font-size: 14px;\">Persian Dates</div>\n    <div style=\"display: flex; gap: 8px;\">\n      <button id=\"persian-dates-minimize\" style=\"\n        background: none;\n        border: none;\n        cursor: pointer;\n        font-size: 16px;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      \">−</button>\n      <button id=\"persian-dates-hide\" style=\"\n        background: none;\n        border: none;\n        cursor: pointer;\n        font-size: 16px;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      \">×</button>\n    </div>\n  `;\n    floatingPanel.appendChild(header);\n    // Create content area\n    const content = document.createElement('div');\n    content.id = 'persian-dates-content';\n    content.style.cssText = `\n    padding: 16px;\n    overflow-y: auto;\n    max-height: 340px;\n    display: block;\n  `;\n    floatingPanel.appendChild(content);\n    // Add to document\n    document.body.appendChild(floatingPanel);\n    // Make panel draggable\n    makeDraggable(floatingPanel, header);\n    // Handle minimize button\n    const minimizeBtn = floatingPanel.querySelector('#persian-dates-minimize');\n    if (minimizeBtn) {\n        minimizeBtn.addEventListener('click', () => {\n            const content = floatingPanel === null || floatingPanel === void 0 ? void 0 : floatingPanel.querySelector('#persian-dates-content');\n            if (content) {\n                if (content.style.display === 'none') {\n                    // Expand\n                    content.style.display = 'block';\n                    minimizeBtn.textContent = '−';\n                }\n                else {\n                    // Collapse\n                    content.style.display = 'none';\n                    minimizeBtn.textContent = '+';\n                }\n            }\n        });\n    }\n    // Handle hide button\n    const hideBtn = floatingPanel.querySelector('#persian-dates-hide');\n    if (hideBtn) {\n        hideBtn.addEventListener('click', () => {\n            hidePanel();\n            savePanelState();\n        });\n    }\n    // Create show button (initially hidden)\n    createShowButton();\n}\n/**\n * Create a small button to show the panel when it's hidden\n */\nfunction createShowButton() {\n    // Remove existing button if any\n    if (showButton && document.body.contains(showButton)) {\n        document.body.removeChild(showButton);\n    }\n    // Create new button\n    showButton = document.createElement('div');\n    showButton.id = 'persian-dates-show-button';\n    showButton.style.cssText = `\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    width: 36px;\n    height: 36px;\n    background: #ffffff;\n    border-radius: 18px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n    display: none;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    z-index: 9999;\n    font-size: 18px;\n    color: #333;\n  `;\n    showButton.innerHTML = `<span style=\"font-weight: bold;\">🗓️</span>`;\n    showButton.title = \"Show Persian Dates\";\n    // Add click event\n    showButton.addEventListener('click', () => {\n        showPanel();\n        savePanelState();\n    });\n    // Add to document\n    document.body.appendChild(showButton);\n}\n/**\n * Hide the panel and show the small button\n */\nfunction hidePanel() {\n    if (!floatingPanel || !showButton)\n        return;\n    // Save position before hiding\n    if (floatingPanel.style.top)\n        panelPosition.top = floatingPanel.style.top;\n    if (floatingPanel.style.left)\n        panelPosition.left = floatingPanel.style.left;\n    if (floatingPanel.style.right)\n        panelPosition.right = floatingPanel.style.right;\n    if (floatingPanel.style.bottom)\n        panelPosition.bottom = floatingPanel.style.bottom;\n    // Hide panel\n    floatingPanel.style.display = 'none';\n    // Show button\n    showButton.style.display = 'flex';\n    // Update state\n    isPanelHidden = true;\n}\n/**\n * Show the panel and hide the small button\n */\nfunction showPanel() {\n    if (!floatingPanel || !showButton)\n        return;\n    // Show panel\n    floatingPanel.style.display = 'flex';\n    // Hide button\n    showButton.style.display = 'none';\n    // Update state\n    isPanelHidden = false;\n}\n/**\n * Save panel state to storage\n */\nfunction savePanelState() {\n    try {\n        const state = {\n            hidden: isPanelHidden,\n            position: panelPosition\n        };\n        localStorage.setItem('persian-dates-panel-state', JSON.stringify(state));\n    }\n    catch (error) {\n        console.error(\"Error saving panel state:\", error);\n    }\n}\n/**\n * Load panel state from storage\n */\nfunction loadPanelState() {\n    try {\n        const savedState = localStorage.getItem('persian-dates-panel-state');\n        if (savedState) {\n            const state = JSON.parse(savedState);\n            isPanelHidden = state.hidden;\n            if (state.position) {\n                panelPosition = state.position;\n            }\n        }\n    }\n    catch (error) {\n        console.error(\"Error loading panel state:\", error);\n    }\n}\n/**\n * Update panel content with current conversions\n */\nfunction updatePanelContent() {\n    if (!floatingPanel)\n        return;\n    const content = floatingPanel.querySelector('#persian-dates-content');\n    if (!content)\n        return;\n    if (convertedDates.size === 0) {\n        content.innerHTML = `\n      <div style=\"text-align: center; color: #888; padding: 8px 0;\">\n        No date mentions found.\n      </div>\n    `;\n        return;\n    }\n    // Generate conversion list\n    let html = '';\n    convertedDates.forEach(({ persianDate, element }, gregorianDate) => {\n        html += `\n      <div style=\"margin-bottom: 12px; padding-bottom: 12px; border-bottom: 1px solid #f0f0f0;\">\n        <div style=\"margin-bottom: 4px; direction: rtl; text-align: right;\">\n          <span style=\"font-weight: 600; cursor: pointer;\" data-date=\"${gregorianDate}\">${persianDate}</span>\n        </div>\n        <div style=\"font-size: 12px; color: #888;\">\n          ${gregorianDate}\n        </div>\n      </div>\n    `;\n    });\n    // Add copy instructions\n    html += `\n    <div style=\"font-size: 12px; color: #888; margin-top: 8px; text-align: center;\">\n      Click a date to copy Persian format or scroll to its location\n    </div>\n  `;\n    content.innerHTML = html;\n    // Add click handlers for copying and scrolling\n    const dateElements = content.querySelectorAll('span[data-date]');\n    dateElements.forEach(element => {\n        element.addEventListener('click', (e) => {\n            const target = e.target;\n            const gregorianDate = target.getAttribute('data-date');\n            if (!gregorianDate)\n                return;\n            const conversion = convertedDates.get(gregorianDate);\n            if (!conversion)\n                return;\n            // Scroll the original element into view\n            conversion.element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            // Show a highlight effect\n            const originalElement = conversion.element;\n            originalElement.style.backgroundColor = '#fff3cd';\n            setTimeout(() => {\n                originalElement.style.backgroundColor = '';\n            }, 2000);\n        });\n    });\n}\n/**\n * Show a toast message when text is copied\n */\nfunction showCopyToast(message) {\n    // Remove existing toast if any\n    const existingToast = document.getElementById('persian-dates-toast');\n    if (existingToast) {\n        document.body.removeChild(existingToast);\n    }\n    // Create toast\n    const toast = document.createElement('div');\n    toast.id = 'persian-dates-toast';\n    toast.style.cssText = `\n    position: fixed;\n    bottom: 60px;\n    right: 20px;\n    background: rgba(0, 0, 0, 0.7);\n    color: white;\n    padding: 8px 16px;\n    border-radius: 4px;\n    font-size: 14px;\n    z-index: 10000;\n  `;\n    toast.textContent = message;\n    document.body.appendChild(toast);\n    // Remove after 2 seconds\n    setTimeout(() => {\n        if (document.body.contains(toast)) {\n            document.body.removeChild(toast);\n        }\n    }, 2000);\n}\n/**\n * Remove the floating panel\n */\nfunction removeFloatingPanel() {\n    if (floatingPanel && document.body.contains(floatingPanel)) {\n        document.body.removeChild(floatingPanel);\n        floatingPanel = null;\n    }\n    if (showButton && document.body.contains(showButton)) {\n        document.body.removeChild(showButton);\n        showButton = null;\n    }\n}\n/**\n * Make an element draggable\n */\nfunction makeDraggable(element, handle) {\n    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n    // Set handle for dragging\n    handle.onmousedown = dragMouseDown;\n    function dragMouseDown(e) {\n        e.preventDefault();\n        // Get the mouse cursor position at startup\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        document.onmouseup = closeDragElement;\n        // Call a function whenever the cursor moves\n        document.onmousemove = elementDrag;\n    }\n    function elementDrag(e) {\n        e.preventDefault();\n        // Calculate the new cursor position\n        pos1 = pos3 - e.clientX;\n        pos2 = pos4 - e.clientY;\n        pos3 = e.clientX;\n        pos4 = e.clientY;\n        // Set the element's new position\n        element.style.top = (element.offsetTop - pos2) + \"px\";\n        element.style.left = (element.offsetLeft - pos1) + \"px\";\n        // Clear any right/bottom positioning\n        element.style.right = 'auto';\n        element.style.bottom = 'auto';\n        // Save updated position to our tracking object\n        panelPosition = {\n            top: element.style.top,\n            left: element.style.left,\n            right: '',\n            bottom: ''\n        };\n    }\n    function closeDragElement() {\n        // Stop moving when mouse button is released\n        document.onmouseup = null;\n        document.onmousemove = null;\n        // Save position after drag ends\n        savePanelState();\n    }\n}\n/**\n * Extract date information from a mention string like \"April 26, 2025\"\n */\nfunction extractDateFromMention(text) {\n    try {\n        // Replace multiple spaces with single space and trim\n        const cleaned = text.replace(/\\s+/g, ' ').trim();\n        // Try to parse the date\n        const date = (0, dateUtils_1.parseGregorian)(cleaned);\n        if (date) {\n            return { date, display: cleaned };\n        }\n        return null;\n    }\n    catch (error) {\n        console.error(\"Error extracting date from mention:\", error);\n        return null;\n    }\n}\n/**\n * Reset all date mentions to their original values\n */\nfunction resetDateMentions() {\n    console.log(\"mtlog: Resetting date mentions\");\n    // Just remove panel and clear conversions\n    const count = convertedDates.size;\n    convertedDates.clear();\n    removeFloatingPanel();\n    return count;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertTable = convertTable;\nexports.resetAllConversions = resetAllConversions;\nexports.wasRecentlyProcessed = wasRecentlyProcessed;\nexports.isCurrentlyMakingChanges = isCurrentlyMakingChanges;\nexports.getErrorCount = getErrorCount;\nconst dateUtils_1 = require(\"./dateUtils\");\n// Only track errors - no state storage\nlet conversionErrorCount = 0;\n// Flag to prevent observer loops\nlet isMakingChanges = false;\n// Keep track of the last time we processed dates\nlet lastProcessedTime = 0;\n// Main conversion function - completely stateless\nfunction convertTable(persianInput) {\n    const startTime = Date.now();\n    console.log(\"mtlog: Starting table conversion, persianInput =\", persianInput);\n    // Set the flag that we're making changes\n    isMakingChanges = true;\n    let conversionCount = 0;\n    try {\n        // Process each date cell in Notion's table\n        document.querySelectorAll(\"[data-testid='property-value'] div, div.notion-date\").forEach(el => {\n            // Skip elements that are not visible\n            if (!isElementVisible(el))\n                return;\n            const current = el.innerText.trim();\n            // Skip empty cells\n            if (!current)\n                return;\n            if (persianInput) {\n                // If we want Persian dates\n                // Skip if already in Persian format\n                if ((0, dateUtils_1.isPersianDate)(current)) {\n                    return;\n                }\n                // Try to parse as Gregorian date\n                const parsedDate = (0, dateUtils_1.parseGregorian)(current);\n                if (parsedDate) {\n                    // This is a valid Gregorian date - convert it using jalaali-js\n                    const jalaliDate = (0, dateUtils_1.formatJalali)(parsedDate);\n                    // Skip invalid conversions\n                    if (jalaliDate === \"Invalid Date\") {\n                        console.warn(\"Skipping invalid date conversion:\", current);\n                        return;\n                    }\n                    // Update visible text to Persian if it's different\n                    if (el.innerText !== jalaliDate) {\n                        // Store original content in a data attribute for restoration\n                        if (!el.hasAttribute('data-original-date')) {\n                            el.setAttribute('data-original-date', current);\n                        }\n                        el.innerText = jalaliDate;\n                        conversionCount++;\n                        console.log(\"mtlog: Converted\", current, \"to\", jalaliDate);\n                    }\n                }\n            }\n            else {\n                // If we want Gregorian dates\n                // Check if this is a Persian date that needs restoration\n                if ((0, dateUtils_1.isPersianDate)(current)) {\n                    // Try to get the original date if stored\n                    const originalDate = el.getAttribute('data-original-date');\n                    if (originalDate) {\n                        // We have the original, use it\n                        el.innerText = originalDate;\n                        el.removeAttribute('data-original-date');\n                        conversionCount++;\n                        console.log(\"mtlog: Restored original date:\", originalDate);\n                    }\n                    else {\n                        // No original stored, convert from Persian using jalaali-js\n                        const gregorianDate = (0, dateUtils_1.persianToGregorian)(current);\n                        if (gregorianDate) {\n                            el.innerText = gregorianDate;\n                            conversionCount++;\n                            console.log(\"mtlog: Converted Persian to Gregorian:\", current, \"->\", gregorianDate);\n                        }\n                    }\n                }\n            }\n        });\n        // Update the last processed timestamp\n        lastProcessedTime = startTime;\n        console.log(`mtlog: Processed ${conversionCount} dates`);\n    }\n    catch (error) {\n        console.error(\"Error during conversion:\", error);\n        conversionErrorCount++;\n    }\n    finally {\n        // Always reset the flag\n        isMakingChanges = false;\n    }\n    return conversionCount;\n}\n// Helper function to check if an element is visible\nfunction isElementVisible(el) {\n    return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n// Function to reset all dates to their original values\nfunction resetAllConversions() {\n    console.log(\"mtlog: Resetting all conversions\");\n    isMakingChanges = true;\n    let count = 0;\n    try {\n        // Reset error count\n        conversionErrorCount = 0;\n        // Strategy 1: First try to restore from original data attribute\n        document.querySelectorAll('[data-original-date]').forEach(el => {\n            const originalDate = el.getAttribute('data-original-date');\n            if (originalDate) {\n                el.innerText = originalDate;\n                el.removeAttribute('data-original-date');\n                count++;\n                console.log(\"mtlog: Reset to original date:\", originalDate);\n            }\n        });\n        // Strategy 2: For any remaining Persian dates, convert them to Gregorian\n        document.querySelectorAll(\"[data-testid='property-value'] div, div.notion-date\").forEach(el => {\n            if (!isElementVisible(el))\n                return;\n            const current = el.innerText.trim();\n            if (!current)\n                return;\n            // Check if it's a Persian date without original data\n            if ((0, dateUtils_1.isPersianDate)(current) && !el.hasAttribute('data-original-date')) {\n                const gregorianDate = (0, dateUtils_1.persianToGregorian)(current);\n                if (gregorianDate) {\n                    el.innerText = gregorianDate;\n                    count++;\n                    console.log(\"mtlog: Converted Persian to Gregorian:\", current, \"->\", gregorianDate);\n                }\n            }\n        });\n        console.log(`mtlog: Reset ${count} date cells`);\n    }\n    finally {\n        isMakingChanges = false;\n    }\n    return count;\n}\n// Check if a conversion was done recently\nfunction wasRecentlyProcessed(timeThresholdMs = 500) {\n    return (Date.now() - lastProcessedTime) < timeThresholdMs;\n}\n// Check if we're currently making changes\nfunction isCurrentlyMakingChanges() {\n    return isMakingChanges;\n}\n// Get the current error count\nfunction getErrorCount() {\n    return conversionErrorCount;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.months = void 0;\nexports.isPersianDate = isPersianDate;\nexports.parseGregorian = parseGregorian;\nexports.formatJalali = formatJalali;\nexports.persianToGregorian = persianToGregorian;\n// Use require for CommonJS modules\nconst jalaali = require('jalaali-js');\n// Month name mapping for parsing\nexports.months = {\n    january: 1, february: 2, march: 3, april: 4, may: 5, june: 6,\n    july: 7, august: 8, september: 9, october: 10, november: 11, december: 12,\n    jan: 1, feb: 2, mar: 3, apr: 4, jun: 6, jul: 7, aug: 8, sep: 9, sept: 9, oct: 10, nov: 11, dec: 12\n};\n/**\n * Improved function to check if a string appears to be a Persian date\n */\nfunction isPersianDate(text) {\n    if (!text || typeof text !== 'string')\n        return false;\n    // Clean the input\n    text = text.trim();\n    // Pattern 1: yyyy/mm/dd format with years between 1300-1499\n    const standardFormat = text.match(/^(\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})$/);\n    if (standardFormat) {\n        const year = parseInt(standardFormat[1], 10);\n        const month = parseInt(standardFormat[2], 10);\n        const day = parseInt(standardFormat[3], 10);\n        // Basic validation\n        if (year >= 1300 && year < 1500 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {\n            return jalaali.isValidJalaaliDate(year, month, day);\n        }\n    }\n    // Pattern 2: Persian month names\n    const persianMonthNames = [\n        'فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور',\n        'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'\n    ];\n    for (const month of persianMonthNames) {\n        if (text.includes(month)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Parse a Gregorian date string into a Date object\n * Handles various common date formats\n */\nfunction parseGregorian(text) {\n    if (!text || typeof text !== 'string')\n        return null;\n    // Clean the input\n    text = text.trim();\n    // Quick check: if it looks like a Persian date, don't try to parse as Gregorian\n    if (isPersianDate(text)) {\n        return null;\n    }\n    try {\n        // Month Day, Year (e.g., \"January 15, 2023\")\n        let m = text.match(/\\b([A-Za-z]+)\\s+(\\d{1,2}),\\s*(\\d{4})\\b/);\n        if (m) {\n            const mon = exports.months[m[1].toLowerCase()];\n            if (!mon)\n                return null;\n            return new Date(+m[3], mon - 1, +m[2]);\n        }\n        // ISO format: Year-Month-Day or Year/Month/Day (e.g., \"2023-01-15\" or \"2023/01/15\")\n        m = text.match(/\\b(\\d{4})[-/](\\d{1,2})[-/](\\d{1,2})\\b/);\n        if (m) {\n            const year = parseInt(m[1], 10);\n            const month = parseInt(m[2], 10);\n            const day = parseInt(m[3], 10);\n            // Skip if it looks like a Persian date\n            if (year >= 1300 && year < 1500) {\n                // Only consider it Gregorian if it's a common year like 1400 (which could be both)\n                // and has English context clues\n                const hasEnglishContext = Object.keys(exports.months).some(month => text.toLowerCase().includes(month.toLowerCase()));\n                if (!hasEnglishContext) {\n                    return null;\n                }\n            }\n            // Basic validation\n            if (month < 1 || month > 12 || day < 1 || day > 31)\n                return null;\n            return new Date(year, month - 1, day);\n        }\n        // US format: Month/Day/Year (e.g., \"1/15/2023\")\n        m = text.match(/\\b(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})\\b/);\n        if (m) {\n            const month = parseInt(m[1], 10);\n            const day = parseInt(m[2], 10);\n            const year = parseInt(m[3], 10);\n            // Skip if it looks like a Persian date\n            if (year >= 1300 && year < 1500) {\n                return null;\n            }\n            // Basic validation\n            if (month < 1 || month > 12 || day < 1 || day > 31)\n                return null;\n            return new Date(year, month - 1, day);\n        }\n        // Year Month Day (e.g., \"2023 January 15\")\n        m = text.match(/\\b(\\d{4})\\s+([A-Za-z]+)\\s+(\\d{1,2})\\b/);\n        if (m) {\n            const mon = exports.months[m[2].toLowerCase()];\n            if (!mon)\n                return null;\n            return new Date(+m[1], mon - 1, +m[3]);\n        }\n        // Try for relative dates like \"Today\", \"Yesterday\", \"Tomorrow\"\n        if (/today/i.test(text)) {\n            return new Date();\n        }\n        if (/yesterday/i.test(text)) {\n            const yesterday = new Date();\n            yesterday.setDate(yesterday.getDate() - 1);\n            return yesterday;\n        }\n        if (/tomorrow/i.test(text)) {\n            const tomorrow = new Date();\n            tomorrow.setDate(tomorrow.getDate() + 1);\n            return tomorrow;\n        }\n    }\n    catch (error) {\n        console.error(\"Error parsing date:\", text, error);\n    }\n    return null;\n}\n/**\n * Convert a Date object to Persian (Jalali) date format using jalaali-js\n */\nfunction formatJalali(d) {\n    // Validate input\n    if (!d || !(d instanceof Date) || isNaN(d.getTime())) {\n        console.error(\"Invalid date passed to formatJalali\", d);\n        return \"Invalid Date\";\n    }\n    try {\n        // Use jalaali-js for accurate conversion\n        const jalali = jalaali.toJalaali(d);\n        // Format as yyyy/mm/dd\n        return `${jalali.jy}/${jalali.jm.toString().padStart(2, '0')}/${jalali.jd.toString().padStart(2, '0')}`;\n    }\n    catch (error) {\n        console.error(\"Error in formatJalali:\", error);\n        return \"Invalid Date\";\n    }\n}\n/**\n * Convert a Persian date string to a Gregorian Date object using jalaali-js\n * @param persianDateStr Persian date string in format yyyy/mm/dd\n */\nfunction persianToGregorian(persianDateStr) {\n    try {\n        // Parse the Persian date string\n        const match = persianDateStr.match(/^(\\d{4})\\/(\\d{1,2})\\/(\\d{1,2})$/);\n        if (!match)\n            return null;\n        const jy = parseInt(match[1], 10);\n        const jm = parseInt(match[2], 10);\n        const jd = parseInt(match[3], 10);\n        // Check if it's a valid Persian date\n        if (!jalaali.isValidJalaaliDate(jy, jm, jd)) {\n            return null;\n        }\n        // Convert to Gregorian\n        const gregorian = jalaali.toGregorian(jy, jm, jd);\n        // Format as yyyy/mm/dd\n        return `${gregorian.gy}/${gregorian.gm.toString().padStart(2, '0')}/${gregorian.gd.toString().padStart(2, '0')}`;\n    }\n    catch (error) {\n        console.error(\"Error converting Persian to Gregorian:\", error);\n        return null;\n    }\n}\n","/*\n  Expose functions.\n*/\nmodule.exports =\n  { toJalaali: toJalaali\n  , toGregorian: toGregorian\n  , isValidJalaaliDate: isValidJalaaliDate\n  , isLeapJalaaliYear: isLeapJalaaliYear\n  , jalaaliMonthLength: jalaaliMonthLength\n  , jalCal: jalCal\n  , j2d: j2d\n  , d2j: d2j\n  , g2d: g2d\n  , d2g: d2g\n  , jalaaliToDateObject: jalaaliToDateObject\n  , jalaaliWeek: jalaaliWeek\n  }\n\n/*\n  Jalaali years starting the 33-year rule.\n*/\nvar breaks =  [ -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210\n  , 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178\n  ]\n\n/*\n  Converts a Gregorian date to Jalaali.\n*/\nfunction toJalaali(gy, gm, gd) {\n  if (Object.prototype.toString.call(gy) === '[object Date]') {\n    gd = gy.getDate()\n    gm = gy.getMonth() + 1\n    gy = gy.getFullYear()\n  }\n  return d2j(g2d(gy, gm, gd))\n}\n\n/*\n  Converts a Jalaali date to Gregorian.\n*/\nfunction toGregorian(jy, jm, jd) {\n  return d2g(j2d(jy, jm, jd))\n}\n\n/*\n  Checks whether a Jalaali date is valid or not.\n*/\nfunction isValidJalaaliDate(jy, jm, jd) {\n  return  jy >= -61 && jy <= 3177 &&\n          jm >= 1 && jm <= 12 &&\n          jd >= 1 && jd <= jalaaliMonthLength(jy, jm)\n}\n\n/*\n  Is this a leap year or not?\n*/\nfunction isLeapJalaaliYear(jy) {\n  return jalCalLeap(jy) === 0\n}\n\n/*\n  Number of days in a given month in a Jalaali year.\n*/\nfunction jalaaliMonthLength(jy, jm) {\n  if (jm <= 6) return 31\n  if (jm <= 11) return 30\n  if (isLeapJalaaliYear(jy)) return 30\n  return 29\n}\n\n/*\n    This function determines if the Jalaali (Persian) year is\n    leap (366-day long) or is the common year (365 days)\n\n    @param jy Jalaali calendar year (-61 to 3177)\n    @returns number of years since the last leap year (0 to 4)\n */\nfunction jalCalLeap(jy) {\n  var bl = breaks.length\n    , jp = breaks[0]\n    , jm\n    , jump\n    , leap\n    , n\n    , i\n\n  if (jy < jp || jy >= breaks[bl - 1])\n    throw new Error('Invalid Jalaali year ' + jy)\n\n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i]\n    jump = jm - jp\n    if (jy < jm)\n      break\n    jp = jm\n  }\n  n = jy - jp\n\n  if (jump - n < 6)\n    n = n - jump + div(jump + 4, 33) * 33\n  leap = mod(mod(n + 1, 33) - 1, 4)\n  if (leap === -1) {\n    leap = 4\n  }\n\n  return leap\n}\n\n/*\n  This function determines if the Jalaali (Persian) year is\n  leap (366-day long) or is the common year (365 days), and\n  finds the day in March (Gregorian calendar) of the first\n  day of the Jalaali year (jy).\n\n  @param jy Jalaali calendar year (-61 to 3177)\n  @param withoutLeap when don't need leap (true or false) default is false\n  @return\n    leap: number of years since the last leap year (0 to 4)\n    gy: Gregorian year of the beginning of Jalaali year\n    march: the March day of Farvardin the 1st (1st day of jy)\n  @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\n  @see: http://www.fourmilab.ch/documents/calendar/\n*/\nfunction jalCal(jy, withoutLeap) {\n  var bl = breaks.length\n    , gy = jy + 621\n    , leapJ = -14\n    , jp = breaks[0]\n    , jm\n    , jump\n    , leap\n    , leapG\n    , march\n    , n\n    , i\n\n  if (jy < jp || jy >= breaks[bl - 1])\n    throw new Error('Invalid Jalaali year ' + jy)\n\n  // Find the limiting years for the Jalaali year jy.\n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i]\n    jump = jm - jp\n    if (jy < jm)\n      break\n    leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4)\n    jp = jm\n  }\n  n = jy - jp\n\n  // Find the number of leap years from AD 621 to the beginning\n  // of the current Jalaali year in the Persian calendar.\n  leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4)\n  if (mod(jump, 33) === 4 && jump - n === 4)\n    leapJ += 1\n\n  // And the same in the Gregorian calendar (until the year gy).\n  leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150\n\n  // Determine the Gregorian date of Farvardin the 1st.\n  march = 20 + leapJ - leapG\n\n  // return with gy and march when we don't need leap\n  if (withoutLeap) return { gy: gy, march: march };\n\n\n  // Find how many years have passed since the last leap year.\n  if (jump - n < 6)\n    n = n - jump + div(jump + 4, 33) * 33\n  leap = mod(mod(n + 1, 33) - 1, 4)\n  if (leap === -1) {\n    leap = 4\n  }\n\n  return  { leap: leap\n          , gy: gy\n          , march: march\n          }\n}\n\n/*\n  Converts a date of the Jalaali calendar to the Julian Day number.\n\n  @param jy Jalaali year (1 to 3100)\n  @param jm Jalaali month (1 to 12)\n  @param jd Jalaali day (1 to 29/31)\n  @return Julian Day number\n*/\nfunction j2d(jy, jm, jd) {\n  var r = jalCal(jy, true)\n  return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1\n}\n\n/*\n  Converts the Julian Day number to a date in the Jalaali calendar.\n\n  @param jdn Julian Day number\n  @return\n    jy: Jalaali year (1 to 3100)\n    jm: Jalaali month (1 to 12)\n    jd: Jalaali day (1 to 29/31)\n*/\nfunction d2j(jdn) {\n  var gy = d2g(jdn).gy // Calculate Gregorian year (gy).\n    , jy = gy - 621\n    , r = jalCal(jy, false)\n    , jdn1f = g2d(gy, 3, r.march)\n    , jd\n    , jm\n    , k\n\n  // Find number of days that passed since 1 Farvardin.\n  k = jdn - jdn1f\n  if (k >= 0) {\n    if (k <= 185) {\n      // The first 6 months.\n      jm = 1 + div(k, 31)\n      jd = mod(k, 31) + 1\n      return  { jy: jy\n              , jm: jm\n              , jd: jd\n              }\n    } else {\n      // The remaining months.\n      k -= 186\n    }\n  } else {\n    // Previous Jalaali year.\n    jy -= 1\n    k += 179\n    if (r.leap === 1)\n      k += 1\n  }\n  jm = 7 + div(k, 30)\n  jd = mod(k, 30) + 1\n  return  { jy: jy\n          , jm: jm\n          , jd: jd\n          }\n}\n\n/*\n  Calculates the Julian Day number from Gregorian or Julian\n  calendar dates. This integer number corresponds to the noon of\n  the date (i.e. 12 hours of Universal Time).\n  The procedure was tested to be good since 1 March, -100100 (of both\n  calendars) up to a few million years into the future.\n\n  @param gy Calendar year (years BC numbered 0, -1, -2, ...)\n  @param gm Calendar month (1 to 12)\n  @param gd Calendar day of the month (1 to 28/29/30/31)\n  @return Julian Day number\n*/\nfunction g2d(gy, gm, gd) {\n  var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4)\n      + div(153 * mod(gm + 9, 12) + 2, 5)\n      + gd - 34840408\n  d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752\n  return d\n}\n\n/*\n  Calculates Gregorian and Julian calendar dates from the Julian Day number\n  (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n  calendars) to some millions years ahead of the present.\n\n  @param jdn Julian Day number\n  @return\n    gy: Calendar year (years BC numbered 0, -1, -2, ...)\n    gm: Calendar month (1 to 12)\n    gd: Calendar day of the month M (1 to 28/29/30/31)\n*/\nfunction d2g(jdn) {\n  var j\n    , i\n    , gd\n    , gm\n    , gy\n  j = 4 * jdn + 139361631\n  j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908\n  i = div(mod(j, 1461), 4) * 5 + 308\n  gd = div(mod(i, 153), 5) + 1\n  gm = mod(div(i, 153), 12) + 1\n  gy = div(j, 1461) - 100100 + div(8 - gm, 6)\n  return  { gy: gy\n          , gm: gm\n          , gd: gd\n          }\n}\n\n/**\n * Return Saturday and Friday day of current week(week start in Saturday)\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @returns Saturday and Friday of current week\n */\nfunction jalaaliWeek(jy, jm, jd) {\n  var dayOfWeek = jalaaliToDateObject(jy, jm, jd).getDay();\n\n  var startDayDifference = dayOfWeek == 6 ? 0 : -(dayOfWeek+1);\n  var endDayDifference = 6+startDayDifference;\n\n  return {\n    saturday: d2j(j2d(jy, jm, jd+startDayDifference)),\n    friday: d2j(j2d(jy, jm, jd+endDayDifference))\n  }\n}\n\n/**\n * Convert Jalaali calendar dates to javascript Date object\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @param {number} [h] hours\n * @param {number} [m] minutes\n * @param {number} [s] seconds\n * @param {number} [ms] milliseconds\n * @returns Date object of the jalaali calendar dates\n */\nfunction jalaaliToDateObject(\n  jy,\n  jm,\n  jd,\n  h,\n  m,\n  s,\n  ms\n) {\n  var gregorianCalenderDate = toGregorian(jy, jm, jd);\n\n  return new Date(\n    gregorianCalenderDate.gy,\n    gregorianCalenderDate.gm - 1,\n    gregorianCalenderDate.gd,\n    h || 0,\n    m || 0,\n    s || 0,\n    ms || 0\n  );\n}\n\n/*\n  Utility helper functions.\n*/\n\nfunction div(a, b) {\n  return ~~(a / b)\n}\n\nfunction mod(a, b) {\n  return a - ~~(a / b) * b\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultFonts = void 0;\nexports.saveSelectedFont = saveSelectedFont;\nexports.loadSelectedFont = loadSelectedFont;\nexports.setCurrentFont = setCurrentFont;\nexports.injectFonts = injectFonts;\n// Font injection functionality\nlet fontStyleElement = null;\nlet observer = null;\nlet currentFont = \"Vazirmatn\"; // Default font\n// Unicode range constant\nconst UNICODE_RANGE = 'U+0600-06FF, U+0750-077F, U+FB50-FDFF, U+FE70-FEFF';\n// Font options\nexports.defaultFonts = [\n    { en_name: \"Vazirmatn\", fa_name: \"وزیر متن\", creator: \"زنده یاد صابر راستی کردار\" },\n    { en_name: \"Sahel\", fa_name: \"ساحل\", creator: \"زنده یاد صابر راستی کردار\" },\n    { en_name: \"Parastoo\", fa_name: \"پرستو\", creator: \"زنده یاد صابر راستی کردار\" }\n];\n// All fonts CSS\nconst ALL_FONTS_CSS = `\n/* ========== Vazirmatn ========== */\n@font-face {\n  font-family: \"Vazirmatn\";\n  src:\n    url(\"${chrome.runtime.getURL('assets/fonts/vazir/Vazirmatn[wght].woff2')}\")\n      format(\"woff2 supports variations\"),\n    url(\"${chrome.runtime.getURL('assets/fonts/vazir/Vazirmatn[wght].woff2')}\")\n      format(\"woff2-variations\");\n  font-weight: 100 900;\n  font-style: normal;\n  font-display: swap;\n  unicode-range: ${UNICODE_RANGE};\n}\n\n/* ========== Sahel ========== */\n@font-face {\n  font-family: \"Sahel\";\n  src:\n    url(\"${chrome.runtime.getURL('assets/fonts/sahel/Sahel-VF.woff2')}\")\n      format(\"woff2 supports variations\"),\n    url(\"${chrome.runtime.getURL('assets/fonts/sahel/Sahel-VF.woff2')}\")\n      format(\"woff2-variations\");\n  font-weight: 100 900;\n  font-style: normal;\n  font-display: swap;\n  unicode-range: ${UNICODE_RANGE};\n}\n\n/* ========== Parastoo ========== */\n@font-face {\n  font-family: \"Parastoo\";\n  src: url(\"${chrome.runtime.getURL('assets/fonts/parastoo/Parastoo.woff2')}\") format(\"woff2\");\n  font-weight: normal;\n  font-style: normal;\n  unicode-range: ${UNICODE_RANGE};\n}\n@font-face {\n  font-family: \"Parastoo\";\n  src: url(\"${chrome.runtime.getURL('assets/fonts/parastoo/Parastoo-Bold.woff2')}\")\n    format(\"woff2\");\n  font-weight: bold;\n  font-style: normal;\n  unicode-range: ${UNICODE_RANGE};\n}\n\n/* Keep code blocks in LTR */\n.notion-text-content[data-content-type=\"code\"] {\n  direction: ltr !important;\n  text-align: left !important;\n  font-family: \"SF Mono\", \"Consolas\", \"Monaco\", \"Andale Mono\", monospace !important;\n}\n`;\n// Convert English digits to Persian digits\nfunction toPersianDigits(input) {\n    return input.replace(/\\d/g, d => \"۰۱۲۳۴۵۶۷۸۹\"[parseInt(d)]);\n}\n// Function to check if text contains Persian/Arabic characters\nfunction containsPersianArabic(text) {\n    const persianArabicRegex = /[\\u0600-\\u06FF\\u0750-\\u077F\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/;\n    return persianArabicRegex.test(text);\n}\n// Process a text node\nfunction processTextNode(node) {\n    var _a;\n    const text = node.textContent || '';\n    if (!containsPersianArabic(text))\n        return;\n    const container = (_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.closest('.notranslate[data-content-editable-leaf=\"true\"]');\n    if (!container || container.closest('[data-content-type=\"code\"]'))\n        return;\n    container.style.fontFamily = `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`;\n    container.style.direction = 'rtl';\n    container.style.textAlign = 'right';\n}\n// Process all text nodes in a subtree\nfunction processSubtree(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null);\n    let node;\n    while (node = walker.nextNode()) {\n        processTextNode(node);\n    }\n}\n// Update numbered list block: convert number to Persian and set RTL\nfunction updateNumberedListBlock(block) {\n    const pseudo = block.querySelector('.pseudoBefore');\n    if (pseudo) {\n        let content = pseudo.style.getPropertyValue('--pseudoBefore--content');\n        if (!content)\n            content = pseudo.textContent || \"\";\n        content = content.replace(/[\"']/g, \"\").trim();\n        const persianContent = toPersianDigits(content);\n        pseudo.style.removeProperty(\"--pseudoBefore--content\");\n        pseudo.textContent = persianContent;\n        pseudo.style.direction = 'rtl';\n        pseudo.style.textAlign = 'right';\n    }\n}\n// Apply RTL and number conversion for numbered lists\nfunction applyRTLToNumberedLists() {\n    document.querySelectorAll(\".notion-selectable.notion-numbered_list-block\").forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            updateNumberedListBlock(block);\n            block.style.direction = 'rtl';\n            block.style.textAlign = 'right';\n        }\n    });\n}\n// Apply RTL adjustments for quote blocks\nfunction applyRTLToQuotes() {\n    document.querySelectorAll(\".notion-quote-block\").forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            const bq = block.querySelector(\"blockquote\");\n            if (bq) {\n                const inner = bq.querySelector(\"div[style*='border-left']\");\n                if (inner) {\n                    const computed = window.getComputedStyle(inner);\n                    const originalPaddingLeft = computed.paddingLeft;\n                    const originalPaddingRight = computed.paddingRight;\n                    inner.style.borderLeft = \"none\";\n                    inner.style.borderRight = \"3px solid currentcolor\";\n                    inner.style.paddingLeft = originalPaddingRight;\n                    inner.style.paddingRight = originalPaddingLeft;\n                }\n                bq.style.direction = \"rtl\";\n                bq.style.textAlign = \"right\";\n            }\n        }\n    });\n}\n// Apply RTL adjustments for toggle blocks, including moving the toggle button to the right\nfunction applyRTLToToggleBlocks() {\n    document.querySelectorAll(\".notion-selectable.notion-toggle-block\").forEach((block) => {\n        if (containsPersianArabic(block.textContent || \"\")) {\n            const toggleBlock = block;\n            // toggleBlock.style.direction = \"rtl\";\n            toggleBlock.style.textAlign = \"right\";\n            // Ensure the container reverses the order with important flag to override inline styles\n            const flexContainer = toggleBlock.firstElementChild;\n            if (flexContainer) {\n                flexContainer.style.setProperty(\"flex-direction\", \"row-reverse\", \"important\");\n            }\n        }\n    });\n}\n// Additional RTL logic for blocks\nfunction applyAdditionalRTLLogic() {\n    document.querySelectorAll(\".notion-selectable.notion-bulleted_list-block\").forEach((block) => {\n        block.setAttribute(\"dir\", \"rtl\");\n    });\n    document.querySelectorAll(\".notion-table-block\").forEach((block) => {\n        if (Array.from(block.querySelectorAll(\"*\")).some(el => containsPersianArabic(el.textContent || \"\"))) {\n            block.setAttribute(\"dir\", \"rtl\");\n        }\n    });\n    document.querySelectorAll(\".notion-to_do-block\").forEach((block) => {\n        if (Array.from(block.querySelectorAll(\"*\")).some(el => containsPersianArabic(el.textContent || \"\"))) {\n            block.setAttribute(\"dir\", \"rtl\");\n        }\n    });\n}\n// New parts RTL logic for headers, table cells, header cells, etc.\nfunction applyRTLToNewParts() {\n    const selectors = \".notion-body h1, .notion-body h2, .notion-body h3, .notion-body h4, .notion-body h5, .notion-body h6, \" +\n        \".notion-table-view th, .notion-table-view td, .notion-collection_view-block div[data-content-editable-void='true'] > div:nth-child(2), \" +\n        \".notion-table-view-header-cell, .notion-table-view-cell\";\n    document.querySelectorAll(selectors).forEach((el) => {\n        if (containsPersianArabic(el.textContent || \"\")) {\n            const element = el;\n            element.style.direction = \"rtl\";\n            element.style.textAlign = \"right\";\n            element.style.fontFamily = `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`;\n        }\n    });\n}\n// Global font style for main Notion elements\nfunction applyGlobalFontStyles() {\n    const selectors = [\n        \".notion-page-content\",\n        \".notion-table-view\",\n        \".notion-board-view\",\n        \".notion-gallery-view\",\n        \".notion-page-block\",\n        \".notion-topbar\",\n        \".notion-body\",\n        \".notion-selectable\",\n        \".notion-collection_view-block\",\n        \".notion-frame\",\n        \".notion-collection-item\"\n    ].join(\", \");\n    document.querySelectorAll(selectors).forEach((el) => {\n        el.style.setProperty(\"font-family\", `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`, \"important\");\n    });\n}\n// Setup the observer\nfunction setupObserver() {\n    if (observer)\n        return;\n    observer = new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type === 'childList') {\n                mutation.addedNodes.forEach(node => {\n                    if (node.nodeType === Node.ELEMENT_NODE)\n                        processSubtree(node);\n                });\n            }\n            else if (mutation.type === 'characterData') {\n                processTextNode(mutation.target);\n            }\n        }\n        applyAdditionalRTLLogic();\n        applyGlobalFontStyles();\n        applyRTLToNewParts();\n        applyRTLToNumberedLists();\n        applyRTLToQuotes();\n        applyRTLToToggleBlocks();\n    });\n    observer.observe(document.body, { childList: true, subtree: true, characterData: true });\n    processSubtree(document.body);\n    applyAdditionalRTLLogic();\n    applyGlobalFontStyles();\n    applyRTLToNewParts();\n    applyRTLToNumberedLists();\n    applyRTLToQuotes();\n    applyRTLToToggleBlocks();\n}\n// Cleanup the observer\nfunction cleanupObserver() {\n    if (observer) {\n        observer.disconnect();\n        observer = null;\n    }\n}\n// Save the selected font to storage\nfunction saveSelectedFont(fontFamily) {\n    return new Promise((resolve) => {\n        chrome.storage.sync.set({ selectedFont: fontFamily }, () => resolve());\n    });\n}\n// Load the selected font from storage\nfunction loadSelectedFont() {\n    return new Promise((resolve) => {\n        chrome.storage.sync.get(['selectedFont'], (result) => resolve(result.selectedFont || 'Vazirmatn'));\n    });\n}\n// Set the current font\nfunction setCurrentFont(fontFamily) {\n    currentFont = fontFamily;\n    if (fontStyleElement) {\n        document.querySelectorAll('.notranslate[data-content-editable-leaf=\"true\"]').forEach((el) => {\n            const element = el;\n            if (containsPersianArabic(element.textContent || '')) {\n                element.style.fontFamily = `\"${currentFont}\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, sans-serif`;\n            }\n        });\n    }\n    applyGlobalFontStyles();\n    applyRTLToNewParts();\n    applyRTLToNumberedLists();\n    applyRTLToQuotes();\n    applyRTLToToggleBlocks();\n}\n// Inject or remove font styles and observer\nfunction injectFonts(enabled) {\n    if (enabled) {\n        loadSelectedFont().then((fontFamily) => {\n            currentFont = fontFamily;\n            if (!fontStyleElement) {\n                fontStyleElement = document.createElement('style');\n                fontStyleElement.textContent = ALL_FONTS_CSS;\n                document.head.appendChild(fontStyleElement);\n            }\n            setupObserver();\n        });\n    }\n    else {\n        if (fontStyleElement) {\n            fontStyleElement.remove();\n            fontStyleElement = null;\n        }\n        // Reset all text content elements\n        document.querySelectorAll('.notranslate[data-content-editable-leaf=\"true\"]').forEach((el) => {\n            const element = el;\n            element.style.fontFamily = '';\n            element.style.direction = '';\n            element.style.textAlign = '';\n        });\n        // Reset global font styles\n        const globalSelectors = [\n            \".notion-page-content\",\n            \".notion-table-view\",\n            \".notion-board-view\",\n            \".notion-gallery-view\",\n            \".notion-page-block\",\n            \".notion-topbar\",\n            \".notion-body\",\n            \".notion-selectable\",\n            \".notion-collection_view-block\",\n            \".notion-frame\",\n            \".notion-collection-item\"\n        ].join(\", \");\n        document.querySelectorAll(globalSelectors).forEach((el) => {\n            el.style.removeProperty(\"font-family\");\n        });\n        // Reset heading and table elements\n        const rtlSelectors = \".notion-body h1, .notion-body h2, .notion-body h3, .notion-body h4, .notion-body h5, .notion-body h6, \" +\n            \".notion-table-view th, .notion-table-view td, .notion-collection_view-block div[data-content-editable-void='true'] > div:nth-child(2), \" +\n            \".notion-table-view-header-cell, .notion-table-view-cell\";\n        document.querySelectorAll(rtlSelectors).forEach((el) => {\n            const element = el;\n            element.style.direction = '';\n            element.style.textAlign = '';\n            element.style.fontFamily = '';\n        });\n        // Reset numbered lists\n        document.querySelectorAll(\".notion-selectable.notion-numbered_list-block\").forEach((block) => {\n            block.style.direction = '';\n            block.style.textAlign = '';\n            const pseudo = block.querySelector('.pseudoBefore');\n            if (pseudo) {\n                pseudo.style.direction = '';\n                pseudo.style.textAlign = '';\n            }\n        });\n        // Reset quotes\n        document.querySelectorAll(\".notion-quote-block\").forEach((block) => {\n            const bq = block.querySelector(\"blockquote\");\n            if (bq) {\n                const inner = bq.querySelector(\"div[style*='border-right']\");\n                if (inner) {\n                    inner.style.borderRight = \"none\";\n                    inner.style.borderLeft = \"3px solid currentcolor\";\n                    inner.style.paddingLeft = \"\";\n                    inner.style.paddingRight = \"\";\n                }\n                bq.style.direction = \"\";\n                bq.style.textAlign = \"\";\n            }\n        });\n        // Reset toggle blocks\n        document.querySelectorAll(\".notion-selectable.notion-toggle-block\").forEach((block) => {\n            const toggleBlock = block;\n            toggleBlock.style.textAlign = \"\";\n            const flexContainer = toggleBlock.firstElementChild;\n            if (flexContainer) {\n                flexContainer.style.removeProperty(\"flex-direction\");\n            }\n        });\n        // Reset additional RTL elements\n        document.querySelectorAll(\".notion-selectable.notion-bulleted_list-block, .notion-table-block, .notion-to_do-block\").forEach((block) => {\n            block.removeAttribute(\"dir\");\n        });\n        cleanupObserver();\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst convertTable_1 = require(\"../convertTable\");\nconst convertNotif_1 = require(\"../convertNotif\");\nconst fontInjection_1 = require(\"../fontInjection\");\n// Track if Persian mode is enabled\nlet persianInput = false;\n// Track if font injection is enabled\nlet fontInjectionEnabled = false;\n// Flag to prevent multiple simultaneous conversions\nlet isProcessingDate = false;\n// Debounce timer for mutation events\nlet debounceTimer = null;\n// Initialize from storage\nchrome.storage.sync.get([\"persianInput\", \"fontInjectionEnabled\"], d => {\n    console.log(\"mtlog: Initial state loaded\", d);\n    persianInput = !!d.persianInput;\n    fontInjectionEnabled = !!d.fontInjectionEnabled;\n    // Initial conversion if enabled\n    if (persianInput) {\n        setTimeout(() => {\n            convertDates();\n        }, 500); // Short delay to let Notion render fully\n    }\n    // Apply font injection if enabled\n    (0, fontInjection_1.injectFonts)(fontInjectionEnabled);\n});\n// Message handler for popup\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\n    if (msg.type === \"applySettings\" && msg.data) {\n        persianInput = !!msg.data.persianInput;\n        fontInjectionEnabled = !!msg.data.fontInjectionEnabled;\n        if (msg.data.selectedFont)\n            (0, fontInjection_1.setCurrentFont)(msg.data.selectedFont);\n        // Apply font injection based on current setting\n        (0, fontInjection_1.injectFonts)(fontInjectionEnabled);\n        // Process dates if Persian input is enabled\n        if (persianInput)\n            convertDates();\n        return;\n    }\n    console.log(\"mtlog: Received message\", msg);\n    // Handle enable/disable toggle\n    if (msg.persianInput !== undefined) {\n        persianInput = msg.persianInput;\n        console.log(\"mtlog: Persian input set to\", persianInput);\n        // Process immediately\n        convertDates();\n    }\n    // Handle font injection toggle\n    if (msg.fontInjectionEnabled !== undefined) {\n        fontInjectionEnabled = msg.fontInjectionEnabled;\n        console.log(\"mtlog: Font injection set to\", fontInjectionEnabled);\n        // Apply font injection\n        (0, fontInjection_1.injectFonts)(fontInjectionEnabled);\n    }\n    // Handle font selection change\n    if (msg.selectedFont) {\n        console.log(\"mtlog: Font selection changed to\", msg.selectedFont);\n        // Update the current font\n        (0, fontInjection_1.setCurrentFont)(msg.selectedFont);\n    }\n    // Handle error check request\n    if (msg.checkErrors) {\n        const errorCount = (0, convertTable_1.getErrorCount)();\n        console.log(\"mtlog: Returning error count\", errorCount);\n        sendResponse({ errorCount });\n        return true; // Keep channel open\n    }\n    // Handle reset request\n    if (msg.refreshConversion) {\n        console.log(\"mtlog: Reset requested\");\n        // Reset all dates\n        const resetCount = (0, convertTable_1.resetAllConversions)();\n        // Reset all date mentions\n        const resetMentionCount = (0, convertNotif_1.resetDateMentions)();\n        const totalResetCount = resetCount + resetMentionCount;\n        // Handle page reload if requested\n        if (msg.forceReload) {\n            chrome.runtime.sendMessage({\n                resetComplete: true,\n                count: totalResetCount,\n                reloading: true\n            });\n            // Reload the page\n            window.location.reload();\n            return true;\n        }\n        // Wait a moment and report completion\n        setTimeout(() => {\n            if (persianInput) {\n                convertDates();\n            }\n            chrome.runtime.sendMessage({\n                resetComplete: true,\n                count: totalResetCount\n            });\n        }, 500);\n        return true; // Keep channel open\n    }\n    return false;\n});\n// Main conversion function\nfunction convertDates() {\n    if (isProcessingDate) {\n        console.log(\"mtlog: Already processing, skipping\");\n        return;\n    }\n    isProcessingDate = true;\n    try {\n        console.log(\"mtlog: Converting dates, mode:\", persianInput ? \"Persian\" : \"Gregorian\");\n        // Step 1: Convert table property dates\n        const tableCount = (0, convertTable_1.convertTable)(persianInput);\n        // Step 2: Convert date mentions/reminders\n        const mentionCount = (0, convertNotif_1.convertDateMentions)(persianInput);\n        const totalCount = tableCount + mentionCount;\n        // Report errors if any\n        const errorCount = (0, convertTable_1.getErrorCount)();\n        if (errorCount > 0) {\n            chrome.runtime.sendMessage({\n                errorCountChanged: true,\n                errorCount\n            });\n        }\n        console.log(`mtlog: Processed ${totalCount} dates (${tableCount} table dates, ${mentionCount} mentions)`);\n    }\n    finally {\n        isProcessingDate = false;\n    }\n}\n// Listen for user interactions that might change dates\nfunction setupEventListeners() {\n    // Date picker interactions\n    document.addEventListener(\"click\", (e) => {\n        var _a, _b, _c, _d;\n        if (!persianInput)\n            return;\n        const target = e.target;\n        // Handle clicks on date picker elements\n        if (target.matches(\"button[name='day']\") ||\n            target.closest(\"button[name='previous-month']\") ||\n            target.closest(\"button[name='next-month']\") ||\n            (target.closest(\"[role='button']\") &&\n                (((_a = target.textContent) === null || _a === void 0 ? void 0 : _a.includes(\"Date format\")) || ((_b = target.textContent) === null || _b === void 0 ? void 0 : _b.includes(\"Clear\"))))) {\n            console.log(\"mtlog: Date picker interaction detected\");\n            // Delay to let Notion update the date\n            setTimeout(convertDates, 300);\n        }\n        // Handle date mention creation (when clicking @ and selecting 'Date')\n        if (target.closest('.notion-selectable') &&\n            (((_c = target.textContent) === null || _c === void 0 ? void 0 : _c.includes('@Date')) ||\n                ((_d = target.textContent) === null || _d === void 0 ? void 0 : _d.includes('@Reminder')))) {\n            console.log(\"mtlog: Date mention interaction detected\");\n            // Wait a bit longer for Notion to create the date mention\n            setTimeout(convertDates, 800);\n        }\n    });\n    // Date field input events\n    document.addEventListener(\"input\", (e) => {\n        if (!persianInput)\n            return;\n        const target = e.target;\n        if (target.closest(\"[data-testid='property-value']\") ||\n            target.tagName === \"INPUT\" && target.closest(\".rdp\")) {\n            console.log(\"mtlog: Date field input detected\");\n            // Debounce multiple rapid inputs\n            if (debounceTimer)\n                clearTimeout(debounceTimer);\n            debounceTimer = window.setTimeout(convertDates, 300);\n        }\n    });\n}\n// Setup MutationObserver to detect date changes in the DOM\nfunction setupMutationObserver() {\n    const observer = new MutationObserver((mutations) => {\n        // Skip if disabled, already making changes, or just processed\n        if (!persianInput || (0, convertTable_1.isCurrentlyMakingChanges)() || (0, convertTable_1.wasRecentlyProcessed)(500)) {\n            return;\n        }\n        // Check if any mutations are related to dates\n        const hasDateChanges = mutations.some(mutation => {\n            // Text changes\n            if (mutation.type === 'characterData' &&\n                mutation.target.nodeType === Node.TEXT_NODE &&\n                mutation.target.textContent) {\n                return true;\n            }\n            // Element changes in date fields\n            if (mutation.type === 'childList' &&\n                mutation.target instanceof HTMLElement &&\n                (mutation.target.closest(\"[data-testid='property-value']\") ||\n                    mutation.target.closest(\".notion-date\") ||\n                    mutation.target.closest(\".notion-reminder\") ||\n                    mutation.target.closest(\".rdp\"))) {\n                return true;\n            }\n            return false;\n        });\n        if (hasDateChanges) {\n            console.log(\"mtlog: Date changes detected by observer\");\n            // Debounce to avoid repeated conversions\n            if (debounceTimer)\n                clearTimeout(debounceTimer);\n            debounceTimer = window.setTimeout(convertDates, 300);\n        }\n    });\n    // Start observing document\n    observer.observe(document.body, {\n        childList: true,\n        subtree: true,\n        characterData: true\n    });\n}\n// Setup error reporting to popup\nfunction setupErrorReporting() {\n    setInterval(() => {\n        if (!persianInput)\n            return;\n        const errorCount = (0, convertTable_1.getErrorCount)();\n        if (errorCount > 0) {\n            chrome.runtime.sendMessage({\n                errorCountChanged: true,\n                errorCount\n            }, () => {\n                // Ignore errors - popup might not be open\n            });\n        }\n    }, 5000);\n}\n// Initialize all event listeners and observers\nsetupEventListeners();\nsetupMutationObserver();\nsetupErrorReporting();\n"],"names":[],"sourceRoot":""}